
dragster.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025e0  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800276c  0800276c  0001276c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027ac  080027ac  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080027ac  080027ac  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080027ac  080027ac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027ac  080027ac  000127ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027b0  080027b0  000127b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080027b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  080027c0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  080027c0  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a4d1  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001752  00000000  00000000  0002a50d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af0  00000000  00000000  0002bc60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a38  00000000  00000000  0002c750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f75  00000000  00000000  0002d188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000affe  00000000  00000000  000460fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a19a5  00000000  00000000  000510fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f2aa0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d1c  00000000  00000000  000f2af0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08002754 	.word	0x08002754

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08002754 	.word	0x08002754

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d0:	f000 fa37 	bl	8000642 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d4:	f000 f805 	bl	80001e2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d8:	f000 f8da 	bl	8000390 <MX_GPIO_Init>
  MX_TIM1_Init();
 80001dc:	f000 f848 	bl	8000270 <MX_TIM1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001e0:	e7fe      	b.n	80001e0 <main+0x14>

080001e2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001e2:	b580      	push	{r7, lr}
 80001e4:	b096      	sub	sp, #88	; 0x58
 80001e6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001e8:	f107 0314 	add.w	r3, r7, #20
 80001ec:	2244      	movs	r2, #68	; 0x44
 80001ee:	2100      	movs	r1, #0
 80001f0:	4618      	mov	r0, r3
 80001f2:	f002 faa7 	bl	8002744 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001f6:	463b      	mov	r3, r7
 80001f8:	2200      	movs	r2, #0
 80001fa:	601a      	str	r2, [r3, #0]
 80001fc:	605a      	str	r2, [r3, #4]
 80001fe:	609a      	str	r2, [r3, #8]
 8000200:	60da      	str	r2, [r3, #12]
 8000202:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000204:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000208:	f000 fd3a 	bl	8000c80 <HAL_PWREx_ControlVoltageScaling>
 800020c:	4603      	mov	r3, r0
 800020e:	2b00      	cmp	r3, #0
 8000210:	d001      	beq.n	8000216 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000212:	f000 f8fb 	bl	800040c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000216:	2310      	movs	r3, #16
 8000218:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800021a:	2301      	movs	r3, #1
 800021c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800021e:	2300      	movs	r3, #0
 8000220:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000222:	2360      	movs	r3, #96	; 0x60
 8000224:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000226:	2300      	movs	r3, #0
 8000228:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800022a:	f107 0314 	add.w	r3, r7, #20
 800022e:	4618      	mov	r0, r3
 8000230:	f000 fd7c 	bl	8000d2c <HAL_RCC_OscConfig>
 8000234:	4603      	mov	r3, r0
 8000236:	2b00      	cmp	r3, #0
 8000238:	d001      	beq.n	800023e <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800023a:	f000 f8e7 	bl	800040c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800023e:	230f      	movs	r3, #15
 8000240:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000242:	2300      	movs	r3, #0
 8000244:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000246:	2300      	movs	r3, #0
 8000248:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800024a:	2300      	movs	r3, #0
 800024c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800024e:	2300      	movs	r3, #0
 8000250:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000252:	463b      	mov	r3, r7
 8000254:	2100      	movs	r1, #0
 8000256:	4618      	mov	r0, r3
 8000258:	f001 f9ca 	bl	80015f0 <HAL_RCC_ClockConfig>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d001      	beq.n	8000266 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000262:	f000 f8d3 	bl	800040c <Error_Handler>
  }
}
 8000266:	bf00      	nop
 8000268:	3758      	adds	r7, #88	; 0x58
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
	...

08000270 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b096      	sub	sp, #88	; 0x58
 8000274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000276:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800027a:	2200      	movs	r2, #0
 800027c:	601a      	str	r2, [r3, #0]
 800027e:	605a      	str	r2, [r3, #4]
 8000280:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000282:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000286:	2200      	movs	r2, #0
 8000288:	601a      	str	r2, [r3, #0]
 800028a:	605a      	str	r2, [r3, #4]
 800028c:	609a      	str	r2, [r3, #8]
 800028e:	60da      	str	r2, [r3, #12]
 8000290:	611a      	str	r2, [r3, #16]
 8000292:	615a      	str	r2, [r3, #20]
 8000294:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000296:	1d3b      	adds	r3, r7, #4
 8000298:	222c      	movs	r2, #44	; 0x2c
 800029a:	2100      	movs	r1, #0
 800029c:	4618      	mov	r0, r3
 800029e:	f002 fa51 	bl	8002744 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80002a2:	4b39      	ldr	r3, [pc, #228]	; (8000388 <MX_TIM1_Init+0x118>)
 80002a4:	4a39      	ldr	r2, [pc, #228]	; (800038c <MX_TIM1_Init+0x11c>)
 80002a6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8000-1;
 80002a8:	4b37      	ldr	r3, [pc, #220]	; (8000388 <MX_TIM1_Init+0x118>)
 80002aa:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80002ae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002b0:	4b35      	ldr	r3, [pc, #212]	; (8000388 <MX_TIM1_Init+0x118>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80002b6:	4b34      	ldr	r3, [pc, #208]	; (8000388 <MX_TIM1_Init+0x118>)
 80002b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80002bc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002be:	4b32      	ldr	r3, [pc, #200]	; (8000388 <MX_TIM1_Init+0x118>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80002c4:	4b30      	ldr	r3, [pc, #192]	; (8000388 <MX_TIM1_Init+0x118>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002ca:	4b2f      	ldr	r3, [pc, #188]	; (8000388 <MX_TIM1_Init+0x118>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80002d0:	482d      	ldr	r0, [pc, #180]	; (8000388 <MX_TIM1_Init+0x118>)
 80002d2:	f001 fb79 	bl	80019c8 <HAL_TIM_PWM_Init>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d001      	beq.n	80002e0 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 80002dc:	f000 f896 	bl	800040c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002e0:	2300      	movs	r3, #0
 80002e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80002e4:	2300      	movs	r3, #0
 80002e6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002e8:	2300      	movs	r3, #0
 80002ea:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80002ec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80002f0:	4619      	mov	r1, r3
 80002f2:	4825      	ldr	r0, [pc, #148]	; (8000388 <MX_TIM1_Init+0x118>)
 80002f4:	f002 f906 	bl	8002504 <HAL_TIMEx_MasterConfigSynchronization>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80002fe:	f000 f885 	bl	800040c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000302:	2360      	movs	r3, #96	; 0x60
 8000304:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000306:	2300      	movs	r3, #0
 8000308:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800030a:	2300      	movs	r3, #0
 800030c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800030e:	2300      	movs	r3, #0
 8000310:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000312:	2300      	movs	r3, #0
 8000314:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000316:	2300      	movs	r3, #0
 8000318:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800031a:	2300      	movs	r3, #0
 800031c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800031e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000322:	2208      	movs	r2, #8
 8000324:	4619      	mov	r1, r3
 8000326:	4818      	ldr	r0, [pc, #96]	; (8000388 <MX_TIM1_Init+0x118>)
 8000328:	f001 fcc4 	bl	8001cb4 <HAL_TIM_PWM_ConfigChannel>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000332:	f000 f86b 	bl	800040c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000336:	2300      	movs	r3, #0
 8000338:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800033a:	2300      	movs	r3, #0
 800033c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800033e:	2300      	movs	r3, #0
 8000340:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000342:	2300      	movs	r3, #0
 8000344:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000346:	2300      	movs	r3, #0
 8000348:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800034a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800034e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000350:	2300      	movs	r3, #0
 8000352:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000354:	2300      	movs	r3, #0
 8000356:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000358:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800035c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800035e:	2300      	movs	r3, #0
 8000360:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000362:	2300      	movs	r3, #0
 8000364:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000366:	1d3b      	adds	r3, r7, #4
 8000368:	4619      	mov	r1, r3
 800036a:	4807      	ldr	r0, [pc, #28]	; (8000388 <MX_TIM1_Init+0x118>)
 800036c:	f002 f930 	bl	80025d0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8000376:	f000 f849 	bl	800040c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800037a:	4803      	ldr	r0, [pc, #12]	; (8000388 <MX_TIM1_Init+0x118>)
 800037c:	f000 f8a6 	bl	80004cc <HAL_TIM_MspPostInit>

}
 8000380:	bf00      	nop
 8000382:	3758      	adds	r7, #88	; 0x58
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}
 8000388:	20000028 	.word	0x20000028
 800038c:	40012c00 	.word	0x40012c00

08000390 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b088      	sub	sp, #32
 8000394:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000396:	f107 030c 	add.w	r3, r7, #12
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
 800039e:	605a      	str	r2, [r3, #4]
 80003a0:	609a      	str	r2, [r3, #8]
 80003a2:	60da      	str	r2, [r3, #12]
 80003a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a6:	4b17      	ldr	r3, [pc, #92]	; (8000404 <MX_GPIO_Init+0x74>)
 80003a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003aa:	4a16      	ldr	r2, [pc, #88]	; (8000404 <MX_GPIO_Init+0x74>)
 80003ac:	f043 0301 	orr.w	r3, r3, #1
 80003b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003b2:	4b14      	ldr	r3, [pc, #80]	; (8000404 <MX_GPIO_Init+0x74>)
 80003b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003b6:	f003 0301 	and.w	r3, r3, #1
 80003ba:	60bb      	str	r3, [r7, #8]
 80003bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003be:	4b11      	ldr	r3, [pc, #68]	; (8000404 <MX_GPIO_Init+0x74>)
 80003c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003c2:	4a10      	ldr	r2, [pc, #64]	; (8000404 <MX_GPIO_Init+0x74>)
 80003c4:	f043 0302 	orr.w	r3, r3, #2
 80003c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003ca:	4b0e      	ldr	r3, [pc, #56]	; (8000404 <MX_GPIO_Init+0x74>)
 80003cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ce:	f003 0302 	and.w	r3, r3, #2
 80003d2:	607b      	str	r3, [r7, #4]
 80003d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80003d6:	2200      	movs	r2, #0
 80003d8:	2102      	movs	r1, #2
 80003da:	480b      	ldr	r0, [pc, #44]	; (8000408 <MX_GPIO_Init+0x78>)
 80003dc:	f000 fc2a 	bl	8000c34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80003e0:	2302      	movs	r3, #2
 80003e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003e4:	2301      	movs	r3, #1
 80003e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e8:	2300      	movs	r3, #0
 80003ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ec:	2300      	movs	r3, #0
 80003ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80003f0:	f107 030c 	add.w	r3, r7, #12
 80003f4:	4619      	mov	r1, r3
 80003f6:	4804      	ldr	r0, [pc, #16]	; (8000408 <MX_GPIO_Init+0x78>)
 80003f8:	f000 faaa 	bl	8000950 <HAL_GPIO_Init>

}
 80003fc:	bf00      	nop
 80003fe:	3720      	adds	r7, #32
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}
 8000404:	40021000 	.word	0x40021000
 8000408:	48000400 	.word	0x48000400

0800040c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000410:	b672      	cpsid	i
}
 8000412:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000414:	e7fe      	b.n	8000414 <Error_Handler+0x8>
	...

08000418 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000418:	b480      	push	{r7}
 800041a:	b083      	sub	sp, #12
 800041c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800041e:	4b0f      	ldr	r3, [pc, #60]	; (800045c <HAL_MspInit+0x44>)
 8000420:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000422:	4a0e      	ldr	r2, [pc, #56]	; (800045c <HAL_MspInit+0x44>)
 8000424:	f043 0301 	orr.w	r3, r3, #1
 8000428:	6613      	str	r3, [r2, #96]	; 0x60
 800042a:	4b0c      	ldr	r3, [pc, #48]	; (800045c <HAL_MspInit+0x44>)
 800042c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800042e:	f003 0301 	and.w	r3, r3, #1
 8000432:	607b      	str	r3, [r7, #4]
 8000434:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000436:	4b09      	ldr	r3, [pc, #36]	; (800045c <HAL_MspInit+0x44>)
 8000438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800043a:	4a08      	ldr	r2, [pc, #32]	; (800045c <HAL_MspInit+0x44>)
 800043c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000440:	6593      	str	r3, [r2, #88]	; 0x58
 8000442:	4b06      	ldr	r3, [pc, #24]	; (800045c <HAL_MspInit+0x44>)
 8000444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800044a:	603b      	str	r3, [r7, #0]
 800044c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800044e:	bf00      	nop
 8000450:	370c      	adds	r7, #12
 8000452:	46bd      	mov	sp, r7
 8000454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000458:	4770      	bx	lr
 800045a:	bf00      	nop
 800045c:	40021000 	.word	0x40021000

08000460 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b084      	sub	sp, #16
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4a15      	ldr	r2, [pc, #84]	; (80004c4 <HAL_TIM_PWM_MspInit+0x64>)
 800046e:	4293      	cmp	r3, r2
 8000470:	d123      	bne.n	80004ba <HAL_TIM_PWM_MspInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000472:	4b15      	ldr	r3, [pc, #84]	; (80004c8 <HAL_TIM_PWM_MspInit+0x68>)
 8000474:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000476:	4a14      	ldr	r2, [pc, #80]	; (80004c8 <HAL_TIM_PWM_MspInit+0x68>)
 8000478:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800047c:	6613      	str	r3, [r2, #96]	; 0x60
 800047e:	4b12      	ldr	r3, [pc, #72]	; (80004c8 <HAL_TIM_PWM_MspInit+0x68>)
 8000480:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000482:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000486:	60fb      	str	r3, [r7, #12]
 8000488:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800048a:	2200      	movs	r2, #0
 800048c:	2100      	movs	r1, #0
 800048e:	2018      	movs	r0, #24
 8000490:	f000 fa27 	bl	80008e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000494:	2018      	movs	r0, #24
 8000496:	f000 fa40 	bl	800091a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800049a:	2200      	movs	r2, #0
 800049c:	2100      	movs	r1, #0
 800049e:	2019      	movs	r0, #25
 80004a0:	f000 fa1f 	bl	80008e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80004a4:	2019      	movs	r0, #25
 80004a6:	f000 fa38 	bl	800091a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 80004aa:	2200      	movs	r2, #0
 80004ac:	2100      	movs	r1, #0
 80004ae:	201a      	movs	r0, #26
 80004b0:	f000 fa17 	bl	80008e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80004b4:	201a      	movs	r0, #26
 80004b6:	f000 fa30 	bl	800091a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80004ba:	bf00      	nop
 80004bc:	3710      	adds	r7, #16
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	40012c00 	.word	0x40012c00
 80004c8:	40021000 	.word	0x40021000

080004cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b088      	sub	sp, #32
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d4:	f107 030c 	add.w	r3, r7, #12
 80004d8:	2200      	movs	r2, #0
 80004da:	601a      	str	r2, [r3, #0]
 80004dc:	605a      	str	r2, [r3, #4]
 80004de:	609a      	str	r2, [r3, #8]
 80004e0:	60da      	str	r2, [r3, #12]
 80004e2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a12      	ldr	r2, [pc, #72]	; (8000534 <HAL_TIM_MspPostInit+0x68>)
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d11d      	bne.n	800052a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ee:	4b12      	ldr	r3, [pc, #72]	; (8000538 <HAL_TIM_MspPostInit+0x6c>)
 80004f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f2:	4a11      	ldr	r2, [pc, #68]	; (8000538 <HAL_TIM_MspPostInit+0x6c>)
 80004f4:	f043 0301 	orr.w	r3, r3, #1
 80004f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004fa:	4b0f      	ldr	r3, [pc, #60]	; (8000538 <HAL_TIM_MspPostInit+0x6c>)
 80004fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fe:	f003 0301 	and.w	r3, r3, #1
 8000502:	60bb      	str	r3, [r7, #8]
 8000504:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000506:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800050a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800050c:	2302      	movs	r3, #2
 800050e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000510:	2300      	movs	r3, #0
 8000512:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000514:	2300      	movs	r3, #0
 8000516:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000518:	2301      	movs	r3, #1
 800051a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800051c:	f107 030c 	add.w	r3, r7, #12
 8000520:	4619      	mov	r1, r3
 8000522:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000526:	f000 fa13 	bl	8000950 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800052a:	bf00      	nop
 800052c:	3720      	adds	r7, #32
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	40012c00 	.word	0x40012c00
 8000538:	40021000 	.word	0x40021000

0800053c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000540:	e7fe      	b.n	8000540 <NMI_Handler+0x4>

08000542 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000542:	b480      	push	{r7}
 8000544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000546:	e7fe      	b.n	8000546 <HardFault_Handler+0x4>

08000548 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800054c:	e7fe      	b.n	800054c <MemManage_Handler+0x4>

0800054e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800054e:	b480      	push	{r7}
 8000550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000552:	e7fe      	b.n	8000552 <BusFault_Handler+0x4>

08000554 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000558:	e7fe      	b.n	8000558 <UsageFault_Handler+0x4>

0800055a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800055a:	b480      	push	{r7}
 800055c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800055e:	bf00      	nop
 8000560:	46bd      	mov	sp, r7
 8000562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000566:	4770      	bx	lr

08000568 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800056c:	bf00      	nop
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr

08000576 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000576:	b480      	push	{r7}
 8000578:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800057a:	bf00      	nop
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr

08000584 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000588:	f000 f8b0 	bl	80006ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800058c:	bf00      	nop
 800058e:	bd80      	pop	{r7, pc}

08000590 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000594:	4802      	ldr	r0, [pc, #8]	; (80005a0 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8000596:	f001 fa6e 	bl	8001a76 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800059a:	bf00      	nop
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	20000028 	.word	0x20000028

080005a4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80005a8:	4802      	ldr	r0, [pc, #8]	; (80005b4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80005aa:	f001 fa64 	bl	8001a76 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80005ae:	bf00      	nop
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	20000028 	.word	0x20000028

080005b8 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80005bc:	4802      	ldr	r0, [pc, #8]	; (80005c8 <TIM1_TRG_COM_IRQHandler+0x10>)
 80005be:	f001 fa5a 	bl	8001a76 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	20000028 	.word	0x20000028

080005cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80005d0:	4b06      	ldr	r3, [pc, #24]	; (80005ec <SystemInit+0x20>)
 80005d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005d6:	4a05      	ldr	r2, [pc, #20]	; (80005ec <SystemInit+0x20>)
 80005d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	e000ed00 	.word	0xe000ed00

080005f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80005f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000628 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005f4:	f7ff ffea 	bl	80005cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005f8:	480c      	ldr	r0, [pc, #48]	; (800062c <LoopForever+0x6>)
  ldr r1, =_edata
 80005fa:	490d      	ldr	r1, [pc, #52]	; (8000630 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005fc:	4a0d      	ldr	r2, [pc, #52]	; (8000634 <LoopForever+0xe>)
  movs r3, #0
 80005fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000600:	e002      	b.n	8000608 <LoopCopyDataInit>

08000602 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000602:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000604:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000606:	3304      	adds	r3, #4

08000608 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000608:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800060a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800060c:	d3f9      	bcc.n	8000602 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800060e:	4a0a      	ldr	r2, [pc, #40]	; (8000638 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000610:	4c0a      	ldr	r4, [pc, #40]	; (800063c <LoopForever+0x16>)
  movs r3, #0
 8000612:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000614:	e001      	b.n	800061a <LoopFillZerobss>

08000616 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000616:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000618:	3204      	adds	r2, #4

0800061a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800061a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800061c:	d3fb      	bcc.n	8000616 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800061e:	f002 f86d 	bl	80026fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000622:	f7ff fdd3 	bl	80001cc <main>

08000626 <LoopForever>:

LoopForever:
    b LoopForever
 8000626:	e7fe      	b.n	8000626 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000628:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800062c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000630:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000634:	080027b4 	.word	0x080027b4
  ldr r2, =_sbss
 8000638:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800063c:	20000078 	.word	0x20000078

08000640 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000640:	e7fe      	b.n	8000640 <ADC1_2_IRQHandler>

08000642 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000642:	b580      	push	{r7, lr}
 8000644:	b082      	sub	sp, #8
 8000646:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000648:	2300      	movs	r3, #0
 800064a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800064c:	2003      	movs	r0, #3
 800064e:	f000 f93d 	bl	80008cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000652:	200f      	movs	r0, #15
 8000654:	f000 f80e 	bl	8000674 <HAL_InitTick>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d002      	beq.n	8000664 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800065e:	2301      	movs	r3, #1
 8000660:	71fb      	strb	r3, [r7, #7]
 8000662:	e001      	b.n	8000668 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000664:	f7ff fed8 	bl	8000418 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000668:	79fb      	ldrb	r3, [r7, #7]
}
 800066a:	4618      	mov	r0, r3
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
	...

08000674 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800067c:	2300      	movs	r3, #0
 800067e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000680:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <HAL_InitTick+0x6c>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d023      	beq.n	80006d0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000688:	4b16      	ldr	r3, [pc, #88]	; (80006e4 <HAL_InitTick+0x70>)
 800068a:	681a      	ldr	r2, [r3, #0]
 800068c:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <HAL_InitTick+0x6c>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	4619      	mov	r1, r3
 8000692:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000696:	fbb3 f3f1 	udiv	r3, r3, r1
 800069a:	fbb2 f3f3 	udiv	r3, r2, r3
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 f949 	bl	8000936 <HAL_SYSTICK_Config>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d10f      	bne.n	80006ca <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	2b0f      	cmp	r3, #15
 80006ae:	d809      	bhi.n	80006c4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006b0:	2200      	movs	r2, #0
 80006b2:	6879      	ldr	r1, [r7, #4]
 80006b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80006b8:	f000 f913 	bl	80008e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006bc:	4a0a      	ldr	r2, [pc, #40]	; (80006e8 <HAL_InitTick+0x74>)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	6013      	str	r3, [r2, #0]
 80006c2:	e007      	b.n	80006d4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80006c4:	2301      	movs	r3, #1
 80006c6:	73fb      	strb	r3, [r7, #15]
 80006c8:	e004      	b.n	80006d4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006ca:	2301      	movs	r3, #1
 80006cc:	73fb      	strb	r3, [r7, #15]
 80006ce:	e001      	b.n	80006d4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006d0:	2301      	movs	r3, #1
 80006d2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80006d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80006d6:	4618      	mov	r0, r3
 80006d8:	3710      	adds	r7, #16
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	20000008 	.word	0x20000008
 80006e4:	20000000 	.word	0x20000000
 80006e8:	20000004 	.word	0x20000004

080006ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80006f0:	4b06      	ldr	r3, [pc, #24]	; (800070c <HAL_IncTick+0x20>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	461a      	mov	r2, r3
 80006f6:	4b06      	ldr	r3, [pc, #24]	; (8000710 <HAL_IncTick+0x24>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4413      	add	r3, r2
 80006fc:	4a04      	ldr	r2, [pc, #16]	; (8000710 <HAL_IncTick+0x24>)
 80006fe:	6013      	str	r3, [r2, #0]
}
 8000700:	bf00      	nop
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	20000008 	.word	0x20000008
 8000710:	20000074 	.word	0x20000074

08000714 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  return uwTick;
 8000718:	4b03      	ldr	r3, [pc, #12]	; (8000728 <HAL_GetTick+0x14>)
 800071a:	681b      	ldr	r3, [r3, #0]
}
 800071c:	4618      	mov	r0, r3
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	20000074 	.word	0x20000074

0800072c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800072c:	b480      	push	{r7}
 800072e:	b085      	sub	sp, #20
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	f003 0307 	and.w	r3, r3, #7
 800073a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800073c:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <__NVIC_SetPriorityGrouping+0x44>)
 800073e:	68db      	ldr	r3, [r3, #12]
 8000740:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000742:	68ba      	ldr	r2, [r7, #8]
 8000744:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000748:	4013      	ands	r3, r2
 800074a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000754:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000758:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800075c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800075e:	4a04      	ldr	r2, [pc, #16]	; (8000770 <__NVIC_SetPriorityGrouping+0x44>)
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	60d3      	str	r3, [r2, #12]
}
 8000764:	bf00      	nop
 8000766:	3714      	adds	r7, #20
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr
 8000770:	e000ed00 	.word	0xe000ed00

08000774 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000778:	4b04      	ldr	r3, [pc, #16]	; (800078c <__NVIC_GetPriorityGrouping+0x18>)
 800077a:	68db      	ldr	r3, [r3, #12]
 800077c:	0a1b      	lsrs	r3, r3, #8
 800077e:	f003 0307 	and.w	r3, r3, #7
}
 8000782:	4618      	mov	r0, r3
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr
 800078c:	e000ed00 	.word	0xe000ed00

08000790 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800079a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	db0b      	blt.n	80007ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	f003 021f 	and.w	r2, r3, #31
 80007a8:	4907      	ldr	r1, [pc, #28]	; (80007c8 <__NVIC_EnableIRQ+0x38>)
 80007aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ae:	095b      	lsrs	r3, r3, #5
 80007b0:	2001      	movs	r0, #1
 80007b2:	fa00 f202 	lsl.w	r2, r0, r2
 80007b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80007ba:	bf00      	nop
 80007bc:	370c      	adds	r7, #12
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	e000e100 	.word	0xe000e100

080007cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	6039      	str	r1, [r7, #0]
 80007d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	db0a      	blt.n	80007f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	b2da      	uxtb	r2, r3
 80007e4:	490c      	ldr	r1, [pc, #48]	; (8000818 <__NVIC_SetPriority+0x4c>)
 80007e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ea:	0112      	lsls	r2, r2, #4
 80007ec:	b2d2      	uxtb	r2, r2
 80007ee:	440b      	add	r3, r1
 80007f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007f4:	e00a      	b.n	800080c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	b2da      	uxtb	r2, r3
 80007fa:	4908      	ldr	r1, [pc, #32]	; (800081c <__NVIC_SetPriority+0x50>)
 80007fc:	79fb      	ldrb	r3, [r7, #7]
 80007fe:	f003 030f 	and.w	r3, r3, #15
 8000802:	3b04      	subs	r3, #4
 8000804:	0112      	lsls	r2, r2, #4
 8000806:	b2d2      	uxtb	r2, r2
 8000808:	440b      	add	r3, r1
 800080a:	761a      	strb	r2, [r3, #24]
}
 800080c:	bf00      	nop
 800080e:	370c      	adds	r7, #12
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr
 8000818:	e000e100 	.word	0xe000e100
 800081c:	e000ed00 	.word	0xe000ed00

08000820 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000820:	b480      	push	{r7}
 8000822:	b089      	sub	sp, #36	; 0x24
 8000824:	af00      	add	r7, sp, #0
 8000826:	60f8      	str	r0, [r7, #12]
 8000828:	60b9      	str	r1, [r7, #8]
 800082a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	f003 0307 	and.w	r3, r3, #7
 8000832:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000834:	69fb      	ldr	r3, [r7, #28]
 8000836:	f1c3 0307 	rsb	r3, r3, #7
 800083a:	2b04      	cmp	r3, #4
 800083c:	bf28      	it	cs
 800083e:	2304      	movcs	r3, #4
 8000840:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000842:	69fb      	ldr	r3, [r7, #28]
 8000844:	3304      	adds	r3, #4
 8000846:	2b06      	cmp	r3, #6
 8000848:	d902      	bls.n	8000850 <NVIC_EncodePriority+0x30>
 800084a:	69fb      	ldr	r3, [r7, #28]
 800084c:	3b03      	subs	r3, #3
 800084e:	e000      	b.n	8000852 <NVIC_EncodePriority+0x32>
 8000850:	2300      	movs	r3, #0
 8000852:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000854:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000858:	69bb      	ldr	r3, [r7, #24]
 800085a:	fa02 f303 	lsl.w	r3, r2, r3
 800085e:	43da      	mvns	r2, r3
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	401a      	ands	r2, r3
 8000864:	697b      	ldr	r3, [r7, #20]
 8000866:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000868:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	fa01 f303 	lsl.w	r3, r1, r3
 8000872:	43d9      	mvns	r1, r3
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000878:	4313      	orrs	r3, r2
         );
}
 800087a:	4618      	mov	r0, r3
 800087c:	3724      	adds	r7, #36	; 0x24
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
	...

08000888 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	3b01      	subs	r3, #1
 8000894:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000898:	d301      	bcc.n	800089e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800089a:	2301      	movs	r3, #1
 800089c:	e00f      	b.n	80008be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800089e:	4a0a      	ldr	r2, [pc, #40]	; (80008c8 <SysTick_Config+0x40>)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	3b01      	subs	r3, #1
 80008a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008a6:	210f      	movs	r1, #15
 80008a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008ac:	f7ff ff8e 	bl	80007cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008b0:	4b05      	ldr	r3, [pc, #20]	; (80008c8 <SysTick_Config+0x40>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008b6:	4b04      	ldr	r3, [pc, #16]	; (80008c8 <SysTick_Config+0x40>)
 80008b8:	2207      	movs	r2, #7
 80008ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008bc:	2300      	movs	r3, #0
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	e000e010 	.word	0xe000e010

080008cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008d4:	6878      	ldr	r0, [r7, #4]
 80008d6:	f7ff ff29 	bl	800072c <__NVIC_SetPriorityGrouping>
}
 80008da:	bf00      	nop
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}

080008e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008e2:	b580      	push	{r7, lr}
 80008e4:	b086      	sub	sp, #24
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	4603      	mov	r3, r0
 80008ea:	60b9      	str	r1, [r7, #8]
 80008ec:	607a      	str	r2, [r7, #4]
 80008ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80008f0:	2300      	movs	r3, #0
 80008f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80008f4:	f7ff ff3e 	bl	8000774 <__NVIC_GetPriorityGrouping>
 80008f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008fa:	687a      	ldr	r2, [r7, #4]
 80008fc:	68b9      	ldr	r1, [r7, #8]
 80008fe:	6978      	ldr	r0, [r7, #20]
 8000900:	f7ff ff8e 	bl	8000820 <NVIC_EncodePriority>
 8000904:	4602      	mov	r2, r0
 8000906:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800090a:	4611      	mov	r1, r2
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff ff5d 	bl	80007cc <__NVIC_SetPriority>
}
 8000912:	bf00      	nop
 8000914:	3718      	adds	r7, #24
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}

0800091a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	b082      	sub	sp, #8
 800091e:	af00      	add	r7, sp, #0
 8000920:	4603      	mov	r3, r0
 8000922:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000928:	4618      	mov	r0, r3
 800092a:	f7ff ff31 	bl	8000790 <__NVIC_EnableIRQ>
}
 800092e:	bf00      	nop
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}

08000936 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000936:	b580      	push	{r7, lr}
 8000938:	b082      	sub	sp, #8
 800093a:	af00      	add	r7, sp, #0
 800093c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800093e:	6878      	ldr	r0, [r7, #4]
 8000940:	f7ff ffa2 	bl	8000888 <SysTick_Config>
 8000944:	4603      	mov	r3, r0
}
 8000946:	4618      	mov	r0, r3
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
	...

08000950 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000950:	b480      	push	{r7}
 8000952:	b087      	sub	sp, #28
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800095a:	2300      	movs	r3, #0
 800095c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800095e:	e14e      	b.n	8000bfe <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	2101      	movs	r1, #1
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	fa01 f303 	lsl.w	r3, r1, r3
 800096c:	4013      	ands	r3, r2
 800096e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	2b00      	cmp	r3, #0
 8000974:	f000 8140 	beq.w	8000bf8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	685b      	ldr	r3, [r3, #4]
 800097c:	f003 0303 	and.w	r3, r3, #3
 8000980:	2b01      	cmp	r3, #1
 8000982:	d005      	beq.n	8000990 <HAL_GPIO_Init+0x40>
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	f003 0303 	and.w	r3, r3, #3
 800098c:	2b02      	cmp	r3, #2
 800098e:	d130      	bne.n	80009f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	689b      	ldr	r3, [r3, #8]
 8000994:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000996:	697b      	ldr	r3, [r7, #20]
 8000998:	005b      	lsls	r3, r3, #1
 800099a:	2203      	movs	r2, #3
 800099c:	fa02 f303 	lsl.w	r3, r2, r3
 80009a0:	43db      	mvns	r3, r3
 80009a2:	693a      	ldr	r2, [r7, #16]
 80009a4:	4013      	ands	r3, r2
 80009a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	68da      	ldr	r2, [r3, #12]
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	005b      	lsls	r3, r3, #1
 80009b0:	fa02 f303 	lsl.w	r3, r2, r3
 80009b4:	693a      	ldr	r2, [r7, #16]
 80009b6:	4313      	orrs	r3, r2
 80009b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	693a      	ldr	r2, [r7, #16]
 80009be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80009c6:	2201      	movs	r2, #1
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	fa02 f303 	lsl.w	r3, r2, r3
 80009ce:	43db      	mvns	r3, r3
 80009d0:	693a      	ldr	r2, [r7, #16]
 80009d2:	4013      	ands	r3, r2
 80009d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	091b      	lsrs	r3, r3, #4
 80009dc:	f003 0201 	and.w	r2, r3, #1
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	fa02 f303 	lsl.w	r3, r2, r3
 80009e6:	693a      	ldr	r2, [r7, #16]
 80009e8:	4313      	orrs	r3, r2
 80009ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	693a      	ldr	r2, [r7, #16]
 80009f0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	f003 0303 	and.w	r3, r3, #3
 80009fa:	2b03      	cmp	r3, #3
 80009fc:	d017      	beq.n	8000a2e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	68db      	ldr	r3, [r3, #12]
 8000a02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	005b      	lsls	r3, r3, #1
 8000a08:	2203      	movs	r2, #3
 8000a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0e:	43db      	mvns	r3, r3
 8000a10:	693a      	ldr	r2, [r7, #16]
 8000a12:	4013      	ands	r3, r2
 8000a14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	689a      	ldr	r2, [r3, #8]
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	005b      	lsls	r3, r3, #1
 8000a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	4313      	orrs	r3, r2
 8000a26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	693a      	ldr	r2, [r7, #16]
 8000a2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	f003 0303 	and.w	r3, r3, #3
 8000a36:	2b02      	cmp	r3, #2
 8000a38:	d123      	bne.n	8000a82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	08da      	lsrs	r2, r3, #3
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	3208      	adds	r2, #8
 8000a42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	f003 0307 	and.w	r3, r3, #7
 8000a4e:	009b      	lsls	r3, r3, #2
 8000a50:	220f      	movs	r2, #15
 8000a52:	fa02 f303 	lsl.w	r3, r2, r3
 8000a56:	43db      	mvns	r3, r3
 8000a58:	693a      	ldr	r2, [r7, #16]
 8000a5a:	4013      	ands	r3, r2
 8000a5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	691a      	ldr	r2, [r3, #16]
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	f003 0307 	and.w	r3, r3, #7
 8000a68:	009b      	lsls	r3, r3, #2
 8000a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6e:	693a      	ldr	r2, [r7, #16]
 8000a70:	4313      	orrs	r3, r2
 8000a72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	08da      	lsrs	r2, r3, #3
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	3208      	adds	r2, #8
 8000a7c:	6939      	ldr	r1, [r7, #16]
 8000a7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	2203      	movs	r2, #3
 8000a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a92:	43db      	mvns	r3, r3
 8000a94:	693a      	ldr	r2, [r7, #16]
 8000a96:	4013      	ands	r3, r2
 8000a98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	f003 0203 	and.w	r2, r3, #3
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	005b      	lsls	r3, r3, #1
 8000aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aaa:	693a      	ldr	r2, [r7, #16]
 8000aac:	4313      	orrs	r3, r2
 8000aae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	693a      	ldr	r2, [r7, #16]
 8000ab4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	f000 809a 	beq.w	8000bf8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac4:	4b55      	ldr	r3, [pc, #340]	; (8000c1c <HAL_GPIO_Init+0x2cc>)
 8000ac6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ac8:	4a54      	ldr	r2, [pc, #336]	; (8000c1c <HAL_GPIO_Init+0x2cc>)
 8000aca:	f043 0301 	orr.w	r3, r3, #1
 8000ace:	6613      	str	r3, [r2, #96]	; 0x60
 8000ad0:	4b52      	ldr	r3, [pc, #328]	; (8000c1c <HAL_GPIO_Init+0x2cc>)
 8000ad2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ad4:	f003 0301 	and.w	r3, r3, #1
 8000ad8:	60bb      	str	r3, [r7, #8]
 8000ada:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000adc:	4a50      	ldr	r2, [pc, #320]	; (8000c20 <HAL_GPIO_Init+0x2d0>)
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	089b      	lsrs	r3, r3, #2
 8000ae2:	3302      	adds	r3, #2
 8000ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	f003 0303 	and.w	r3, r3, #3
 8000af0:	009b      	lsls	r3, r3, #2
 8000af2:	220f      	movs	r2, #15
 8000af4:	fa02 f303 	lsl.w	r3, r2, r3
 8000af8:	43db      	mvns	r3, r3
 8000afa:	693a      	ldr	r2, [r7, #16]
 8000afc:	4013      	ands	r3, r2
 8000afe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b06:	d013      	beq.n	8000b30 <HAL_GPIO_Init+0x1e0>
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	4a46      	ldr	r2, [pc, #280]	; (8000c24 <HAL_GPIO_Init+0x2d4>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d00d      	beq.n	8000b2c <HAL_GPIO_Init+0x1dc>
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	4a45      	ldr	r2, [pc, #276]	; (8000c28 <HAL_GPIO_Init+0x2d8>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d007      	beq.n	8000b28 <HAL_GPIO_Init+0x1d8>
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	4a44      	ldr	r2, [pc, #272]	; (8000c2c <HAL_GPIO_Init+0x2dc>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d101      	bne.n	8000b24 <HAL_GPIO_Init+0x1d4>
 8000b20:	2303      	movs	r3, #3
 8000b22:	e006      	b.n	8000b32 <HAL_GPIO_Init+0x1e2>
 8000b24:	2307      	movs	r3, #7
 8000b26:	e004      	b.n	8000b32 <HAL_GPIO_Init+0x1e2>
 8000b28:	2302      	movs	r3, #2
 8000b2a:	e002      	b.n	8000b32 <HAL_GPIO_Init+0x1e2>
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	e000      	b.n	8000b32 <HAL_GPIO_Init+0x1e2>
 8000b30:	2300      	movs	r3, #0
 8000b32:	697a      	ldr	r2, [r7, #20]
 8000b34:	f002 0203 	and.w	r2, r2, #3
 8000b38:	0092      	lsls	r2, r2, #2
 8000b3a:	4093      	lsls	r3, r2
 8000b3c:	693a      	ldr	r2, [r7, #16]
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b42:	4937      	ldr	r1, [pc, #220]	; (8000c20 <HAL_GPIO_Init+0x2d0>)
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	089b      	lsrs	r3, r3, #2
 8000b48:	3302      	adds	r3, #2
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b50:	4b37      	ldr	r3, [pc, #220]	; (8000c30 <HAL_GPIO_Init+0x2e0>)
 8000b52:	689b      	ldr	r3, [r3, #8]
 8000b54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	43db      	mvns	r3, r3
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d003      	beq.n	8000b74 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000b6c:	693a      	ldr	r2, [r7, #16]
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	4313      	orrs	r3, r2
 8000b72:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b74:	4a2e      	ldr	r2, [pc, #184]	; (8000c30 <HAL_GPIO_Init+0x2e0>)
 8000b76:	693b      	ldr	r3, [r7, #16]
 8000b78:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000b7a:	4b2d      	ldr	r3, [pc, #180]	; (8000c30 <HAL_GPIO_Init+0x2e0>)
 8000b7c:	68db      	ldr	r3, [r3, #12]
 8000b7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	43db      	mvns	r3, r3
 8000b84:	693a      	ldr	r2, [r7, #16]
 8000b86:	4013      	ands	r3, r2
 8000b88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d003      	beq.n	8000b9e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000b96:	693a      	ldr	r2, [r7, #16]
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b9e:	4a24      	ldr	r2, [pc, #144]	; (8000c30 <HAL_GPIO_Init+0x2e0>)
 8000ba0:	693b      	ldr	r3, [r7, #16]
 8000ba2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000ba4:	4b22      	ldr	r3, [pc, #136]	; (8000c30 <HAL_GPIO_Init+0x2e0>)
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	43db      	mvns	r3, r3
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d003      	beq.n	8000bc8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000bc0:	693a      	ldr	r2, [r7, #16]
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000bc8:	4a19      	ldr	r2, [pc, #100]	; (8000c30 <HAL_GPIO_Init+0x2e0>)
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000bce:	4b18      	ldr	r3, [pc, #96]	; (8000c30 <HAL_GPIO_Init+0x2e0>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	43db      	mvns	r3, r3
 8000bd8:	693a      	ldr	r2, [r7, #16]
 8000bda:	4013      	ands	r3, r2
 8000bdc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d003      	beq.n	8000bf2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000bf2:	4a0f      	ldr	r2, [pc, #60]	; (8000c30 <HAL_GPIO_Init+0x2e0>)
 8000bf4:	693b      	ldr	r3, [r7, #16]
 8000bf6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	fa22 f303 	lsr.w	r3, r2, r3
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	f47f aea9 	bne.w	8000960 <HAL_GPIO_Init+0x10>
  }
}
 8000c0e:	bf00      	nop
 8000c10:	bf00      	nop
 8000c12:	371c      	adds	r7, #28
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	40021000 	.word	0x40021000
 8000c20:	40010000 	.word	0x40010000
 8000c24:	48000400 	.word	0x48000400
 8000c28:	48000800 	.word	0x48000800
 8000c2c:	48000c00 	.word	0x48000c00
 8000c30:	40010400 	.word	0x40010400

08000c34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	460b      	mov	r3, r1
 8000c3e:	807b      	strh	r3, [r7, #2]
 8000c40:	4613      	mov	r3, r2
 8000c42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c44:	787b      	ldrb	r3, [r7, #1]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d003      	beq.n	8000c52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c4a:	887a      	ldrh	r2, [r7, #2]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c50:	e002      	b.n	8000c58 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c52:	887a      	ldrh	r2, [r7, #2]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr

08000c64 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000c68:	4b04      	ldr	r3, [pc, #16]	; (8000c7c <HAL_PWREx_GetVoltageRange+0x18>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	40007000 	.word	0x40007000

08000c80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c8e:	d130      	bne.n	8000cf2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c90:	4b23      	ldr	r3, [pc, #140]	; (8000d20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c9c:	d038      	beq.n	8000d10 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c9e:	4b20      	ldr	r3, [pc, #128]	; (8000d20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000ca6:	4a1e      	ldr	r2, [pc, #120]	; (8000d20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ca8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000cae:	4b1d      	ldr	r3, [pc, #116]	; (8000d24 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	2232      	movs	r2, #50	; 0x32
 8000cb4:	fb02 f303 	mul.w	r3, r2, r3
 8000cb8:	4a1b      	ldr	r2, [pc, #108]	; (8000d28 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000cba:	fba2 2303 	umull	r2, r3, r2, r3
 8000cbe:	0c9b      	lsrs	r3, r3, #18
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000cc4:	e002      	b.n	8000ccc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	3b01      	subs	r3, #1
 8000cca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ccc:	4b14      	ldr	r3, [pc, #80]	; (8000d20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cce:	695b      	ldr	r3, [r3, #20]
 8000cd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cd8:	d102      	bne.n	8000ce0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d1f2      	bne.n	8000cc6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000ce0:	4b0f      	ldr	r3, [pc, #60]	; (8000d20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ce2:	695b      	ldr	r3, [r3, #20]
 8000ce4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ce8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cec:	d110      	bne.n	8000d10 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000cee:	2303      	movs	r3, #3
 8000cf0:	e00f      	b.n	8000d12 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000cf2:	4b0b      	ldr	r3, [pc, #44]	; (8000d20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000cfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cfe:	d007      	beq.n	8000d10 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000d08:	4a05      	ldr	r2, [pc, #20]	; (8000d20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d0e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000d10:	2300      	movs	r3, #0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3714      	adds	r7, #20
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	40007000 	.word	0x40007000
 8000d24:	20000000 	.word	0x20000000
 8000d28:	431bde83 	.word	0x431bde83

08000d2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b08a      	sub	sp, #40	; 0x28
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d102      	bne.n	8000d40 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	f000 bc4f 	b.w	80015de <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d40:	4b97      	ldr	r3, [pc, #604]	; (8000fa0 <HAL_RCC_OscConfig+0x274>)
 8000d42:	689b      	ldr	r3, [r3, #8]
 8000d44:	f003 030c 	and.w	r3, r3, #12
 8000d48:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d4a:	4b95      	ldr	r3, [pc, #596]	; (8000fa0 <HAL_RCC_OscConfig+0x274>)
 8000d4c:	68db      	ldr	r3, [r3, #12]
 8000d4e:	f003 0303 	and.w	r3, r3, #3
 8000d52:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f003 0310 	and.w	r3, r3, #16
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	f000 80e6 	beq.w	8000f2e <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000d62:	6a3b      	ldr	r3, [r7, #32]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d007      	beq.n	8000d78 <HAL_RCC_OscConfig+0x4c>
 8000d68:	6a3b      	ldr	r3, [r7, #32]
 8000d6a:	2b0c      	cmp	r3, #12
 8000d6c:	f040 808d 	bne.w	8000e8a <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	f040 8089 	bne.w	8000e8a <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000d78:	4b89      	ldr	r3, [pc, #548]	; (8000fa0 <HAL_RCC_OscConfig+0x274>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f003 0302 	and.w	r3, r3, #2
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d006      	beq.n	8000d92 <HAL_RCC_OscConfig+0x66>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	69db      	ldr	r3, [r3, #28]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d102      	bne.n	8000d92 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	f000 bc26 	b.w	80015de <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d96:	4b82      	ldr	r3, [pc, #520]	; (8000fa0 <HAL_RCC_OscConfig+0x274>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f003 0308 	and.w	r3, r3, #8
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d004      	beq.n	8000dac <HAL_RCC_OscConfig+0x80>
 8000da2:	4b7f      	ldr	r3, [pc, #508]	; (8000fa0 <HAL_RCC_OscConfig+0x274>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000daa:	e005      	b.n	8000db8 <HAL_RCC_OscConfig+0x8c>
 8000dac:	4b7c      	ldr	r3, [pc, #496]	; (8000fa0 <HAL_RCC_OscConfig+0x274>)
 8000dae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000db2:	091b      	lsrs	r3, r3, #4
 8000db4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d224      	bcs.n	8000e06 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f000 fda1 	bl	8001908 <RCC_SetFlashLatencyFromMSIRange>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d002      	beq.n	8000dd2 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	f000 bc06 	b.w	80015de <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000dd2:	4b73      	ldr	r3, [pc, #460]	; (8000fa0 <HAL_RCC_OscConfig+0x274>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a72      	ldr	r2, [pc, #456]	; (8000fa0 <HAL_RCC_OscConfig+0x274>)
 8000dd8:	f043 0308 	orr.w	r3, r3, #8
 8000ddc:	6013      	str	r3, [r2, #0]
 8000dde:	4b70      	ldr	r3, [pc, #448]	; (8000fa0 <HAL_RCC_OscConfig+0x274>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dea:	496d      	ldr	r1, [pc, #436]	; (8000fa0 <HAL_RCC_OscConfig+0x274>)
 8000dec:	4313      	orrs	r3, r2
 8000dee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000df0:	4b6b      	ldr	r3, [pc, #428]	; (8000fa0 <HAL_RCC_OscConfig+0x274>)
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6a1b      	ldr	r3, [r3, #32]
 8000dfc:	021b      	lsls	r3, r3, #8
 8000dfe:	4968      	ldr	r1, [pc, #416]	; (8000fa0 <HAL_RCC_OscConfig+0x274>)
 8000e00:	4313      	orrs	r3, r2
 8000e02:	604b      	str	r3, [r1, #4]
 8000e04:	e025      	b.n	8000e52 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e06:	4b66      	ldr	r3, [pc, #408]	; (8000fa0 <HAL_RCC_OscConfig+0x274>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a65      	ldr	r2, [pc, #404]	; (8000fa0 <HAL_RCC_OscConfig+0x274>)
 8000e0c:	f043 0308 	orr.w	r3, r3, #8
 8000e10:	6013      	str	r3, [r2, #0]
 8000e12:	4b63      	ldr	r3, [pc, #396]	; (8000fa0 <HAL_RCC_OscConfig+0x274>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e1e:	4960      	ldr	r1, [pc, #384]	; (8000fa0 <HAL_RCC_OscConfig+0x274>)
 8000e20:	4313      	orrs	r3, r2
 8000e22:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e24:	4b5e      	ldr	r3, [pc, #376]	; (8000fa0 <HAL_RCC_OscConfig+0x274>)
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6a1b      	ldr	r3, [r3, #32]
 8000e30:	021b      	lsls	r3, r3, #8
 8000e32:	495b      	ldr	r1, [pc, #364]	; (8000fa0 <HAL_RCC_OscConfig+0x274>)
 8000e34:	4313      	orrs	r3, r2
 8000e36:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000e38:	6a3b      	ldr	r3, [r7, #32]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d109      	bne.n	8000e52 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e42:	4618      	mov	r0, r3
 8000e44:	f000 fd60 	bl	8001908 <RCC_SetFlashLatencyFromMSIRange>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e3c5      	b.n	80015de <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000e52:	f000 fccd 	bl	80017f0 <HAL_RCC_GetSysClockFreq>
 8000e56:	4602      	mov	r2, r0
 8000e58:	4b51      	ldr	r3, [pc, #324]	; (8000fa0 <HAL_RCC_OscConfig+0x274>)
 8000e5a:	689b      	ldr	r3, [r3, #8]
 8000e5c:	091b      	lsrs	r3, r3, #4
 8000e5e:	f003 030f 	and.w	r3, r3, #15
 8000e62:	4950      	ldr	r1, [pc, #320]	; (8000fa4 <HAL_RCC_OscConfig+0x278>)
 8000e64:	5ccb      	ldrb	r3, [r1, r3]
 8000e66:	f003 031f 	and.w	r3, r3, #31
 8000e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8000e6e:	4a4e      	ldr	r2, [pc, #312]	; (8000fa8 <HAL_RCC_OscConfig+0x27c>)
 8000e70:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000e72:	4b4e      	ldr	r3, [pc, #312]	; (8000fac <HAL_RCC_OscConfig+0x280>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff fbfc 	bl	8000674 <HAL_InitTick>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8000e80:	7dfb      	ldrb	r3, [r7, #23]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d052      	beq.n	8000f2c <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8000e86:	7dfb      	ldrb	r3, [r7, #23]
 8000e88:	e3a9      	b.n	80015de <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	69db      	ldr	r3, [r3, #28]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d032      	beq.n	8000ef8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000e92:	4b43      	ldr	r3, [pc, #268]	; (8000fa0 <HAL_RCC_OscConfig+0x274>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a42      	ldr	r2, [pc, #264]	; (8000fa0 <HAL_RCC_OscConfig+0x274>)
 8000e98:	f043 0301 	orr.w	r3, r3, #1
 8000e9c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e9e:	f7ff fc39 	bl	8000714 <HAL_GetTick>
 8000ea2:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000ea4:	e008      	b.n	8000eb8 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ea6:	f7ff fc35 	bl	8000714 <HAL_GetTick>
 8000eaa:	4602      	mov	r2, r0
 8000eac:	69bb      	ldr	r3, [r7, #24]
 8000eae:	1ad3      	subs	r3, r2, r3
 8000eb0:	2b02      	cmp	r3, #2
 8000eb2:	d901      	bls.n	8000eb8 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	e392      	b.n	80015de <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000eb8:	4b39      	ldr	r3, [pc, #228]	; (8000fa0 <HAL_RCC_OscConfig+0x274>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f003 0302 	and.w	r3, r3, #2
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d0f0      	beq.n	8000ea6 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ec4:	4b36      	ldr	r3, [pc, #216]	; (8000fa0 <HAL_RCC_OscConfig+0x274>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a35      	ldr	r2, [pc, #212]	; (8000fa0 <HAL_RCC_OscConfig+0x274>)
 8000eca:	f043 0308 	orr.w	r3, r3, #8
 8000ece:	6013      	str	r3, [r2, #0]
 8000ed0:	4b33      	ldr	r3, [pc, #204]	; (8000fa0 <HAL_RCC_OscConfig+0x274>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000edc:	4930      	ldr	r1, [pc, #192]	; (8000fa0 <HAL_RCC_OscConfig+0x274>)
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ee2:	4b2f      	ldr	r3, [pc, #188]	; (8000fa0 <HAL_RCC_OscConfig+0x274>)
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6a1b      	ldr	r3, [r3, #32]
 8000eee:	021b      	lsls	r3, r3, #8
 8000ef0:	492b      	ldr	r1, [pc, #172]	; (8000fa0 <HAL_RCC_OscConfig+0x274>)
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	604b      	str	r3, [r1, #4]
 8000ef6:	e01a      	b.n	8000f2e <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000ef8:	4b29      	ldr	r3, [pc, #164]	; (8000fa0 <HAL_RCC_OscConfig+0x274>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a28      	ldr	r2, [pc, #160]	; (8000fa0 <HAL_RCC_OscConfig+0x274>)
 8000efe:	f023 0301 	bic.w	r3, r3, #1
 8000f02:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000f04:	f7ff fc06 	bl	8000714 <HAL_GetTick>
 8000f08:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f0a:	e008      	b.n	8000f1e <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f0c:	f7ff fc02 	bl	8000714 <HAL_GetTick>
 8000f10:	4602      	mov	r2, r0
 8000f12:	69bb      	ldr	r3, [r7, #24]
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	2b02      	cmp	r3, #2
 8000f18:	d901      	bls.n	8000f1e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	e35f      	b.n	80015de <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f1e:	4b20      	ldr	r3, [pc, #128]	; (8000fa0 <HAL_RCC_OscConfig+0x274>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f003 0302 	and.w	r3, r3, #2
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d1f0      	bne.n	8000f0c <HAL_RCC_OscConfig+0x1e0>
 8000f2a:	e000      	b.n	8000f2e <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f2c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d073      	beq.n	8001022 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000f3a:	6a3b      	ldr	r3, [r7, #32]
 8000f3c:	2b08      	cmp	r3, #8
 8000f3e:	d005      	beq.n	8000f4c <HAL_RCC_OscConfig+0x220>
 8000f40:	6a3b      	ldr	r3, [r7, #32]
 8000f42:	2b0c      	cmp	r3, #12
 8000f44:	d10e      	bne.n	8000f64 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	2b03      	cmp	r3, #3
 8000f4a:	d10b      	bne.n	8000f64 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f4c:	4b14      	ldr	r3, [pc, #80]	; (8000fa0 <HAL_RCC_OscConfig+0x274>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d063      	beq.n	8001020 <HAL_RCC_OscConfig+0x2f4>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d15f      	bne.n	8001020 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8000f60:	2301      	movs	r3, #1
 8000f62:	e33c      	b.n	80015de <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f6c:	d106      	bne.n	8000f7c <HAL_RCC_OscConfig+0x250>
 8000f6e:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <HAL_RCC_OscConfig+0x274>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a0b      	ldr	r2, [pc, #44]	; (8000fa0 <HAL_RCC_OscConfig+0x274>)
 8000f74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f78:	6013      	str	r3, [r2, #0]
 8000f7a:	e025      	b.n	8000fc8 <HAL_RCC_OscConfig+0x29c>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f84:	d114      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x284>
 8000f86:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <HAL_RCC_OscConfig+0x274>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a05      	ldr	r2, [pc, #20]	; (8000fa0 <HAL_RCC_OscConfig+0x274>)
 8000f8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f90:	6013      	str	r3, [r2, #0]
 8000f92:	4b03      	ldr	r3, [pc, #12]	; (8000fa0 <HAL_RCC_OscConfig+0x274>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a02      	ldr	r2, [pc, #8]	; (8000fa0 <HAL_RCC_OscConfig+0x274>)
 8000f98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f9c:	6013      	str	r3, [r2, #0]
 8000f9e:	e013      	b.n	8000fc8 <HAL_RCC_OscConfig+0x29c>
 8000fa0:	40021000 	.word	0x40021000
 8000fa4:	0800276c 	.word	0x0800276c
 8000fa8:	20000000 	.word	0x20000000
 8000fac:	20000004 	.word	0x20000004
 8000fb0:	4b8f      	ldr	r3, [pc, #572]	; (80011f0 <HAL_RCC_OscConfig+0x4c4>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a8e      	ldr	r2, [pc, #568]	; (80011f0 <HAL_RCC_OscConfig+0x4c4>)
 8000fb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fba:	6013      	str	r3, [r2, #0]
 8000fbc:	4b8c      	ldr	r3, [pc, #560]	; (80011f0 <HAL_RCC_OscConfig+0x4c4>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a8b      	ldr	r2, [pc, #556]	; (80011f0 <HAL_RCC_OscConfig+0x4c4>)
 8000fc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d013      	beq.n	8000ff8 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fd0:	f7ff fba0 	bl	8000714 <HAL_GetTick>
 8000fd4:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fd6:	e008      	b.n	8000fea <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fd8:	f7ff fb9c 	bl	8000714 <HAL_GetTick>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	69bb      	ldr	r3, [r7, #24]
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	2b64      	cmp	r3, #100	; 0x64
 8000fe4:	d901      	bls.n	8000fea <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	e2f9      	b.n	80015de <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fea:	4b81      	ldr	r3, [pc, #516]	; (80011f0 <HAL_RCC_OscConfig+0x4c4>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d0f0      	beq.n	8000fd8 <HAL_RCC_OscConfig+0x2ac>
 8000ff6:	e014      	b.n	8001022 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ff8:	f7ff fb8c 	bl	8000714 <HAL_GetTick>
 8000ffc:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000ffe:	e008      	b.n	8001012 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001000:	f7ff fb88 	bl	8000714 <HAL_GetTick>
 8001004:	4602      	mov	r2, r0
 8001006:	69bb      	ldr	r3, [r7, #24]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	2b64      	cmp	r3, #100	; 0x64
 800100c:	d901      	bls.n	8001012 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800100e:	2303      	movs	r3, #3
 8001010:	e2e5      	b.n	80015de <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001012:	4b77      	ldr	r3, [pc, #476]	; (80011f0 <HAL_RCC_OscConfig+0x4c4>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800101a:	2b00      	cmp	r3, #0
 800101c:	d1f0      	bne.n	8001000 <HAL_RCC_OscConfig+0x2d4>
 800101e:	e000      	b.n	8001022 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001020:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f003 0302 	and.w	r3, r3, #2
 800102a:	2b00      	cmp	r3, #0
 800102c:	d060      	beq.n	80010f0 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800102e:	6a3b      	ldr	r3, [r7, #32]
 8001030:	2b04      	cmp	r3, #4
 8001032:	d005      	beq.n	8001040 <HAL_RCC_OscConfig+0x314>
 8001034:	6a3b      	ldr	r3, [r7, #32]
 8001036:	2b0c      	cmp	r3, #12
 8001038:	d119      	bne.n	800106e <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	2b02      	cmp	r3, #2
 800103e:	d116      	bne.n	800106e <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001040:	4b6b      	ldr	r3, [pc, #428]	; (80011f0 <HAL_RCC_OscConfig+0x4c4>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001048:	2b00      	cmp	r3, #0
 800104a:	d005      	beq.n	8001058 <HAL_RCC_OscConfig+0x32c>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d101      	bne.n	8001058 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8001054:	2301      	movs	r3, #1
 8001056:	e2c2      	b.n	80015de <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001058:	4b65      	ldr	r3, [pc, #404]	; (80011f0 <HAL_RCC_OscConfig+0x4c4>)
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	691b      	ldr	r3, [r3, #16]
 8001064:	061b      	lsls	r3, r3, #24
 8001066:	4962      	ldr	r1, [pc, #392]	; (80011f0 <HAL_RCC_OscConfig+0x4c4>)
 8001068:	4313      	orrs	r3, r2
 800106a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800106c:	e040      	b.n	80010f0 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	68db      	ldr	r3, [r3, #12]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d023      	beq.n	80010be <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001076:	4b5e      	ldr	r3, [pc, #376]	; (80011f0 <HAL_RCC_OscConfig+0x4c4>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a5d      	ldr	r2, [pc, #372]	; (80011f0 <HAL_RCC_OscConfig+0x4c4>)
 800107c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001080:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001082:	f7ff fb47 	bl	8000714 <HAL_GetTick>
 8001086:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001088:	e008      	b.n	800109c <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800108a:	f7ff fb43 	bl	8000714 <HAL_GetTick>
 800108e:	4602      	mov	r2, r0
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	1ad3      	subs	r3, r2, r3
 8001094:	2b02      	cmp	r3, #2
 8001096:	d901      	bls.n	800109c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001098:	2303      	movs	r3, #3
 800109a:	e2a0      	b.n	80015de <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800109c:	4b54      	ldr	r3, [pc, #336]	; (80011f0 <HAL_RCC_OscConfig+0x4c4>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d0f0      	beq.n	800108a <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010a8:	4b51      	ldr	r3, [pc, #324]	; (80011f0 <HAL_RCC_OscConfig+0x4c4>)
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	691b      	ldr	r3, [r3, #16]
 80010b4:	061b      	lsls	r3, r3, #24
 80010b6:	494e      	ldr	r1, [pc, #312]	; (80011f0 <HAL_RCC_OscConfig+0x4c4>)
 80010b8:	4313      	orrs	r3, r2
 80010ba:	604b      	str	r3, [r1, #4]
 80010bc:	e018      	b.n	80010f0 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010be:	4b4c      	ldr	r3, [pc, #304]	; (80011f0 <HAL_RCC_OscConfig+0x4c4>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a4b      	ldr	r2, [pc, #300]	; (80011f0 <HAL_RCC_OscConfig+0x4c4>)
 80010c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010ca:	f7ff fb23 	bl	8000714 <HAL_GetTick>
 80010ce:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010d0:	e008      	b.n	80010e4 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010d2:	f7ff fb1f 	bl	8000714 <HAL_GetTick>
 80010d6:	4602      	mov	r2, r0
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	1ad3      	subs	r3, r2, r3
 80010dc:	2b02      	cmp	r3, #2
 80010de:	d901      	bls.n	80010e4 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80010e0:	2303      	movs	r3, #3
 80010e2:	e27c      	b.n	80015de <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010e4:	4b42      	ldr	r3, [pc, #264]	; (80011f0 <HAL_RCC_OscConfig+0x4c4>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d1f0      	bne.n	80010d2 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f003 0308 	and.w	r3, r3, #8
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	f000 8082 	beq.w	8001202 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	695b      	ldr	r3, [r3, #20]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d05f      	beq.n	80011c6 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8001106:	4b3a      	ldr	r3, [pc, #232]	; (80011f0 <HAL_RCC_OscConfig+0x4c4>)
 8001108:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800110c:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	699a      	ldr	r2, [r3, #24]
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	f003 0310 	and.w	r3, r3, #16
 8001118:	429a      	cmp	r2, r3
 800111a:	d037      	beq.n	800118c <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	f003 0302 	and.w	r3, r3, #2
 8001122:	2b00      	cmp	r3, #0
 8001124:	d006      	beq.n	8001134 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800112c:	2b00      	cmp	r3, #0
 800112e:	d101      	bne.n	8001134 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	e254      	b.n	80015de <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	2b00      	cmp	r3, #0
 800113c:	d01b      	beq.n	8001176 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 800113e:	4b2c      	ldr	r3, [pc, #176]	; (80011f0 <HAL_RCC_OscConfig+0x4c4>)
 8001140:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001144:	4a2a      	ldr	r2, [pc, #168]	; (80011f0 <HAL_RCC_OscConfig+0x4c4>)
 8001146:	f023 0301 	bic.w	r3, r3, #1
 800114a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800114e:	f7ff fae1 	bl	8000714 <HAL_GetTick>
 8001152:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001154:	e008      	b.n	8001168 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001156:	f7ff fadd 	bl	8000714 <HAL_GetTick>
 800115a:	4602      	mov	r2, r0
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	1ad3      	subs	r3, r2, r3
 8001160:	2b11      	cmp	r3, #17
 8001162:	d901      	bls.n	8001168 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8001164:	2303      	movs	r3, #3
 8001166:	e23a      	b.n	80015de <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001168:	4b21      	ldr	r3, [pc, #132]	; (80011f0 <HAL_RCC_OscConfig+0x4c4>)
 800116a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1ef      	bne.n	8001156 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8001176:	4b1e      	ldr	r3, [pc, #120]	; (80011f0 <HAL_RCC_OscConfig+0x4c4>)
 8001178:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800117c:	f023 0210 	bic.w	r2, r3, #16
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	491a      	ldr	r1, [pc, #104]	; (80011f0 <HAL_RCC_OscConfig+0x4c4>)
 8001186:	4313      	orrs	r3, r2
 8001188:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800118c:	4b18      	ldr	r3, [pc, #96]	; (80011f0 <HAL_RCC_OscConfig+0x4c4>)
 800118e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001192:	4a17      	ldr	r2, [pc, #92]	; (80011f0 <HAL_RCC_OscConfig+0x4c4>)
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800119c:	f7ff faba 	bl	8000714 <HAL_GetTick>
 80011a0:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011a2:	e008      	b.n	80011b6 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011a4:	f7ff fab6 	bl	8000714 <HAL_GetTick>
 80011a8:	4602      	mov	r2, r0
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	2b11      	cmp	r3, #17
 80011b0:	d901      	bls.n	80011b6 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80011b2:	2303      	movs	r3, #3
 80011b4:	e213      	b.n	80015de <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011b6:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <HAL_RCC_OscConfig+0x4c4>)
 80011b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011bc:	f003 0302 	and.w	r3, r3, #2
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d0ef      	beq.n	80011a4 <HAL_RCC_OscConfig+0x478>
 80011c4:	e01d      	b.n	8001202 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011c6:	4b0a      	ldr	r3, [pc, #40]	; (80011f0 <HAL_RCC_OscConfig+0x4c4>)
 80011c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011cc:	4a08      	ldr	r2, [pc, #32]	; (80011f0 <HAL_RCC_OscConfig+0x4c4>)
 80011ce:	f023 0301 	bic.w	r3, r3, #1
 80011d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011d6:	f7ff fa9d 	bl	8000714 <HAL_GetTick>
 80011da:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80011dc:	e00a      	b.n	80011f4 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011de:	f7ff fa99 	bl	8000714 <HAL_GetTick>
 80011e2:	4602      	mov	r2, r0
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	2b11      	cmp	r3, #17
 80011ea:	d903      	bls.n	80011f4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80011ec:	2303      	movs	r3, #3
 80011ee:	e1f6      	b.n	80015de <HAL_RCC_OscConfig+0x8b2>
 80011f0:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80011f4:	4ba9      	ldr	r3, [pc, #676]	; (800149c <HAL_RCC_OscConfig+0x770>)
 80011f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011fa:	f003 0302 	and.w	r3, r3, #2
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d1ed      	bne.n	80011de <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 0304 	and.w	r3, r3, #4
 800120a:	2b00      	cmp	r3, #0
 800120c:	f000 80bd 	beq.w	800138a <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001210:	2300      	movs	r3, #0
 8001212:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001216:	4ba1      	ldr	r3, [pc, #644]	; (800149c <HAL_RCC_OscConfig+0x770>)
 8001218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800121a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d10e      	bne.n	8001240 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001222:	4b9e      	ldr	r3, [pc, #632]	; (800149c <HAL_RCC_OscConfig+0x770>)
 8001224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001226:	4a9d      	ldr	r2, [pc, #628]	; (800149c <HAL_RCC_OscConfig+0x770>)
 8001228:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800122c:	6593      	str	r3, [r2, #88]	; 0x58
 800122e:	4b9b      	ldr	r3, [pc, #620]	; (800149c <HAL_RCC_OscConfig+0x770>)
 8001230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800123a:	2301      	movs	r3, #1
 800123c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001240:	4b97      	ldr	r3, [pc, #604]	; (80014a0 <HAL_RCC_OscConfig+0x774>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001248:	2b00      	cmp	r3, #0
 800124a:	d118      	bne.n	800127e <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800124c:	4b94      	ldr	r3, [pc, #592]	; (80014a0 <HAL_RCC_OscConfig+0x774>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a93      	ldr	r2, [pc, #588]	; (80014a0 <HAL_RCC_OscConfig+0x774>)
 8001252:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001256:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001258:	f7ff fa5c 	bl	8000714 <HAL_GetTick>
 800125c:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800125e:	e008      	b.n	8001272 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001260:	f7ff fa58 	bl	8000714 <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	2b02      	cmp	r3, #2
 800126c:	d901      	bls.n	8001272 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 800126e:	2303      	movs	r3, #3
 8001270:	e1b5      	b.n	80015de <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001272:	4b8b      	ldr	r3, [pc, #556]	; (80014a0 <HAL_RCC_OscConfig+0x774>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800127a:	2b00      	cmp	r3, #0
 800127c:	d0f0      	beq.n	8001260 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	2b00      	cmp	r3, #0
 8001288:	d02c      	beq.n	80012e4 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 800128a:	4b84      	ldr	r3, [pc, #528]	; (800149c <HAL_RCC_OscConfig+0x770>)
 800128c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001290:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800129c:	497f      	ldr	r1, [pc, #508]	; (800149c <HAL_RCC_OscConfig+0x770>)
 800129e:	4313      	orrs	r3, r2
 80012a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	f003 0304 	and.w	r3, r3, #4
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d010      	beq.n	80012d2 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80012b0:	4b7a      	ldr	r3, [pc, #488]	; (800149c <HAL_RCC_OscConfig+0x770>)
 80012b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012b6:	4a79      	ldr	r2, [pc, #484]	; (800149c <HAL_RCC_OscConfig+0x770>)
 80012b8:	f043 0304 	orr.w	r3, r3, #4
 80012bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80012c0:	4b76      	ldr	r3, [pc, #472]	; (800149c <HAL_RCC_OscConfig+0x770>)
 80012c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012c6:	4a75      	ldr	r2, [pc, #468]	; (800149c <HAL_RCC_OscConfig+0x770>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012d0:	e018      	b.n	8001304 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80012d2:	4b72      	ldr	r3, [pc, #456]	; (800149c <HAL_RCC_OscConfig+0x770>)
 80012d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012d8:	4a70      	ldr	r2, [pc, #448]	; (800149c <HAL_RCC_OscConfig+0x770>)
 80012da:	f043 0301 	orr.w	r3, r3, #1
 80012de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012e2:	e00f      	b.n	8001304 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80012e4:	4b6d      	ldr	r3, [pc, #436]	; (800149c <HAL_RCC_OscConfig+0x770>)
 80012e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012ea:	4a6c      	ldr	r2, [pc, #432]	; (800149c <HAL_RCC_OscConfig+0x770>)
 80012ec:	f023 0301 	bic.w	r3, r3, #1
 80012f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80012f4:	4b69      	ldr	r3, [pc, #420]	; (800149c <HAL_RCC_OscConfig+0x770>)
 80012f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012fa:	4a68      	ldr	r2, [pc, #416]	; (800149c <HAL_RCC_OscConfig+0x770>)
 80012fc:	f023 0304 	bic.w	r3, r3, #4
 8001300:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d016      	beq.n	800133a <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800130c:	f7ff fa02 	bl	8000714 <HAL_GetTick>
 8001310:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001312:	e00a      	b.n	800132a <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001314:	f7ff f9fe 	bl	8000714 <HAL_GetTick>
 8001318:	4602      	mov	r2, r0
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001322:	4293      	cmp	r3, r2
 8001324:	d901      	bls.n	800132a <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e159      	b.n	80015de <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800132a:	4b5c      	ldr	r3, [pc, #368]	; (800149c <HAL_RCC_OscConfig+0x770>)
 800132c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001330:	f003 0302 	and.w	r3, r3, #2
 8001334:	2b00      	cmp	r3, #0
 8001336:	d0ed      	beq.n	8001314 <HAL_RCC_OscConfig+0x5e8>
 8001338:	e01d      	b.n	8001376 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800133a:	f7ff f9eb 	bl	8000714 <HAL_GetTick>
 800133e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001340:	e00a      	b.n	8001358 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001342:	f7ff f9e7 	bl	8000714 <HAL_GetTick>
 8001346:	4602      	mov	r2, r0
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001350:	4293      	cmp	r3, r2
 8001352:	d901      	bls.n	8001358 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8001354:	2303      	movs	r3, #3
 8001356:	e142      	b.n	80015de <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001358:	4b50      	ldr	r3, [pc, #320]	; (800149c <HAL_RCC_OscConfig+0x770>)
 800135a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	2b00      	cmp	r3, #0
 8001364:	d1ed      	bne.n	8001342 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8001366:	4b4d      	ldr	r3, [pc, #308]	; (800149c <HAL_RCC_OscConfig+0x770>)
 8001368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800136c:	4a4b      	ldr	r2, [pc, #300]	; (800149c <HAL_RCC_OscConfig+0x770>)
 800136e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001372:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001376:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800137a:	2b01      	cmp	r3, #1
 800137c:	d105      	bne.n	800138a <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800137e:	4b47      	ldr	r3, [pc, #284]	; (800149c <HAL_RCC_OscConfig+0x770>)
 8001380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001382:	4a46      	ldr	r2, [pc, #280]	; (800149c <HAL_RCC_OscConfig+0x770>)
 8001384:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001388:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0320 	and.w	r3, r3, #32
 8001392:	2b00      	cmp	r3, #0
 8001394:	d03c      	beq.n	8001410 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800139a:	2b00      	cmp	r3, #0
 800139c:	d01c      	beq.n	80013d8 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800139e:	4b3f      	ldr	r3, [pc, #252]	; (800149c <HAL_RCC_OscConfig+0x770>)
 80013a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80013a4:	4a3d      	ldr	r2, [pc, #244]	; (800149c <HAL_RCC_OscConfig+0x770>)
 80013a6:	f043 0301 	orr.w	r3, r3, #1
 80013aa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013ae:	f7ff f9b1 	bl	8000714 <HAL_GetTick>
 80013b2:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80013b4:	e008      	b.n	80013c8 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80013b6:	f7ff f9ad 	bl	8000714 <HAL_GetTick>
 80013ba:	4602      	mov	r2, r0
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d901      	bls.n	80013c8 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e10a      	b.n	80015de <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80013c8:	4b34      	ldr	r3, [pc, #208]	; (800149c <HAL_RCC_OscConfig+0x770>)
 80013ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d0ef      	beq.n	80013b6 <HAL_RCC_OscConfig+0x68a>
 80013d6:	e01b      	b.n	8001410 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80013d8:	4b30      	ldr	r3, [pc, #192]	; (800149c <HAL_RCC_OscConfig+0x770>)
 80013da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80013de:	4a2f      	ldr	r2, [pc, #188]	; (800149c <HAL_RCC_OscConfig+0x770>)
 80013e0:	f023 0301 	bic.w	r3, r3, #1
 80013e4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013e8:	f7ff f994 	bl	8000714 <HAL_GetTick>
 80013ec:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80013ee:	e008      	b.n	8001402 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80013f0:	f7ff f990 	bl	8000714 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e0ed      	b.n	80015de <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001402:	4b26      	ldr	r3, [pc, #152]	; (800149c <HAL_RCC_OscConfig+0x770>)
 8001404:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001408:	f003 0302 	and.w	r3, r3, #2
 800140c:	2b00      	cmp	r3, #0
 800140e:	d1ef      	bne.n	80013f0 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001414:	2b00      	cmp	r3, #0
 8001416:	f000 80e1 	beq.w	80015dc <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800141e:	2b02      	cmp	r3, #2
 8001420:	f040 80b5 	bne.w	800158e <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001424:	4b1d      	ldr	r3, [pc, #116]	; (800149c <HAL_RCC_OscConfig+0x770>)
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	f003 0203 	and.w	r2, r3, #3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001434:	429a      	cmp	r2, r3
 8001436:	d124      	bne.n	8001482 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001442:	3b01      	subs	r3, #1
 8001444:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001446:	429a      	cmp	r2, r3
 8001448:	d11b      	bne.n	8001482 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001454:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001456:	429a      	cmp	r2, r3
 8001458:	d113      	bne.n	8001482 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001464:	085b      	lsrs	r3, r3, #1
 8001466:	3b01      	subs	r3, #1
 8001468:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800146a:	429a      	cmp	r2, r3
 800146c:	d109      	bne.n	8001482 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001478:	085b      	lsrs	r3, r3, #1
 800147a:	3b01      	subs	r3, #1
 800147c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800147e:	429a      	cmp	r2, r3
 8001480:	d05f      	beq.n	8001542 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001482:	6a3b      	ldr	r3, [r7, #32]
 8001484:	2b0c      	cmp	r3, #12
 8001486:	d05a      	beq.n	800153e <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001488:	4b04      	ldr	r3, [pc, #16]	; (800149c <HAL_RCC_OscConfig+0x770>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a03      	ldr	r2, [pc, #12]	; (800149c <HAL_RCC_OscConfig+0x770>)
 800148e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001492:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001494:	f7ff f93e 	bl	8000714 <HAL_GetTick>
 8001498:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800149a:	e00c      	b.n	80014b6 <HAL_RCC_OscConfig+0x78a>
 800149c:	40021000 	.word	0x40021000
 80014a0:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014a4:	f7ff f936 	bl	8000714 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e093      	b.n	80015de <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014b6:	4b4c      	ldr	r3, [pc, #304]	; (80015e8 <HAL_RCC_OscConfig+0x8bc>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d1f0      	bne.n	80014a4 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014c2:	4b49      	ldr	r3, [pc, #292]	; (80015e8 <HAL_RCC_OscConfig+0x8bc>)
 80014c4:	68da      	ldr	r2, [r3, #12]
 80014c6:	4b49      	ldr	r3, [pc, #292]	; (80015ec <HAL_RCC_OscConfig+0x8c0>)
 80014c8:	4013      	ands	r3, r2
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80014d2:	3a01      	subs	r2, #1
 80014d4:	0112      	lsls	r2, r2, #4
 80014d6:	4311      	orrs	r1, r2
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80014dc:	0212      	lsls	r2, r2, #8
 80014de:	4311      	orrs	r1, r2
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80014e4:	0852      	lsrs	r2, r2, #1
 80014e6:	3a01      	subs	r2, #1
 80014e8:	0552      	lsls	r2, r2, #21
 80014ea:	4311      	orrs	r1, r2
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80014f0:	0852      	lsrs	r2, r2, #1
 80014f2:	3a01      	subs	r2, #1
 80014f4:	0652      	lsls	r2, r2, #25
 80014f6:	430a      	orrs	r2, r1
 80014f8:	493b      	ldr	r1, [pc, #236]	; (80015e8 <HAL_RCC_OscConfig+0x8bc>)
 80014fa:	4313      	orrs	r3, r2
 80014fc:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80014fe:	4b3a      	ldr	r3, [pc, #232]	; (80015e8 <HAL_RCC_OscConfig+0x8bc>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a39      	ldr	r2, [pc, #228]	; (80015e8 <HAL_RCC_OscConfig+0x8bc>)
 8001504:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001508:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800150a:	4b37      	ldr	r3, [pc, #220]	; (80015e8 <HAL_RCC_OscConfig+0x8bc>)
 800150c:	68db      	ldr	r3, [r3, #12]
 800150e:	4a36      	ldr	r2, [pc, #216]	; (80015e8 <HAL_RCC_OscConfig+0x8bc>)
 8001510:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001514:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001516:	f7ff f8fd 	bl	8000714 <HAL_GetTick>
 800151a:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800151c:	e008      	b.n	8001530 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800151e:	f7ff f8f9 	bl	8000714 <HAL_GetTick>
 8001522:	4602      	mov	r2, r0
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	2b02      	cmp	r3, #2
 800152a:	d901      	bls.n	8001530 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e056      	b.n	80015de <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001530:	4b2d      	ldr	r3, [pc, #180]	; (80015e8 <HAL_RCC_OscConfig+0x8bc>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d0f0      	beq.n	800151e <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800153c:	e04e      	b.n	80015dc <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e04d      	b.n	80015de <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001542:	4b29      	ldr	r3, [pc, #164]	; (80015e8 <HAL_RCC_OscConfig+0x8bc>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d146      	bne.n	80015dc <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800154e:	4b26      	ldr	r3, [pc, #152]	; (80015e8 <HAL_RCC_OscConfig+0x8bc>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a25      	ldr	r2, [pc, #148]	; (80015e8 <HAL_RCC_OscConfig+0x8bc>)
 8001554:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001558:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800155a:	4b23      	ldr	r3, [pc, #140]	; (80015e8 <HAL_RCC_OscConfig+0x8bc>)
 800155c:	68db      	ldr	r3, [r3, #12]
 800155e:	4a22      	ldr	r2, [pc, #136]	; (80015e8 <HAL_RCC_OscConfig+0x8bc>)
 8001560:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001564:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001566:	f7ff f8d5 	bl	8000714 <HAL_GetTick>
 800156a:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800156c:	e008      	b.n	8001580 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800156e:	f7ff f8d1 	bl	8000714 <HAL_GetTick>
 8001572:	4602      	mov	r2, r0
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	2b02      	cmp	r3, #2
 800157a:	d901      	bls.n	8001580 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 800157c:	2303      	movs	r3, #3
 800157e:	e02e      	b.n	80015de <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001580:	4b19      	ldr	r3, [pc, #100]	; (80015e8 <HAL_RCC_OscConfig+0x8bc>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d0f0      	beq.n	800156e <HAL_RCC_OscConfig+0x842>
 800158c:	e026      	b.n	80015dc <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800158e:	6a3b      	ldr	r3, [r7, #32]
 8001590:	2b0c      	cmp	r3, #12
 8001592:	d021      	beq.n	80015d8 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001594:	4b14      	ldr	r3, [pc, #80]	; (80015e8 <HAL_RCC_OscConfig+0x8bc>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a13      	ldr	r2, [pc, #76]	; (80015e8 <HAL_RCC_OscConfig+0x8bc>)
 800159a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800159e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a0:	f7ff f8b8 	bl	8000714 <HAL_GetTick>
 80015a4:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015a6:	e008      	b.n	80015ba <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015a8:	f7ff f8b4 	bl	8000714 <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e011      	b.n	80015de <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015ba:	4b0b      	ldr	r3, [pc, #44]	; (80015e8 <HAL_RCC_OscConfig+0x8bc>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d1f0      	bne.n	80015a8 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 80015c6:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <HAL_RCC_OscConfig+0x8bc>)
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	4a07      	ldr	r2, [pc, #28]	; (80015e8 <HAL_RCC_OscConfig+0x8bc>)
 80015cc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80015d0:	f023 0303 	bic.w	r3, r3, #3
 80015d4:	60d3      	str	r3, [r2, #12]
 80015d6:	e001      	b.n	80015dc <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e000      	b.n	80015de <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3728      	adds	r7, #40	; 0x28
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40021000 	.word	0x40021000
 80015ec:	f99f808c 	.word	0xf99f808c

080015f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d101      	bne.n	8001604 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e0e7      	b.n	80017d4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001604:	4b75      	ldr	r3, [pc, #468]	; (80017dc <HAL_RCC_ClockConfig+0x1ec>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0307 	and.w	r3, r3, #7
 800160c:	683a      	ldr	r2, [r7, #0]
 800160e:	429a      	cmp	r2, r3
 8001610:	d910      	bls.n	8001634 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001612:	4b72      	ldr	r3, [pc, #456]	; (80017dc <HAL_RCC_ClockConfig+0x1ec>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f023 0207 	bic.w	r2, r3, #7
 800161a:	4970      	ldr	r1, [pc, #448]	; (80017dc <HAL_RCC_ClockConfig+0x1ec>)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	4313      	orrs	r3, r2
 8001620:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001622:	4b6e      	ldr	r3, [pc, #440]	; (80017dc <HAL_RCC_ClockConfig+0x1ec>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0307 	and.w	r3, r3, #7
 800162a:	683a      	ldr	r2, [r7, #0]
 800162c:	429a      	cmp	r2, r3
 800162e:	d001      	beq.n	8001634 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e0cf      	b.n	80017d4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0302 	and.w	r3, r3, #2
 800163c:	2b00      	cmp	r3, #0
 800163e:	d010      	beq.n	8001662 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	689a      	ldr	r2, [r3, #8]
 8001644:	4b66      	ldr	r3, [pc, #408]	; (80017e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800164c:	429a      	cmp	r2, r3
 800164e:	d908      	bls.n	8001662 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001650:	4b63      	ldr	r3, [pc, #396]	; (80017e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	4960      	ldr	r1, [pc, #384]	; (80017e0 <HAL_RCC_ClockConfig+0x1f0>)
 800165e:	4313      	orrs	r3, r2
 8001660:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	2b00      	cmp	r3, #0
 800166c:	d04c      	beq.n	8001708 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	2b03      	cmp	r3, #3
 8001674:	d107      	bne.n	8001686 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001676:	4b5a      	ldr	r3, [pc, #360]	; (80017e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d121      	bne.n	80016c6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e0a6      	b.n	80017d4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	2b02      	cmp	r3, #2
 800168c:	d107      	bne.n	800169e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800168e:	4b54      	ldr	r3, [pc, #336]	; (80017e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d115      	bne.n	80016c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e09a      	b.n	80017d4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d107      	bne.n	80016b6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016a6:	4b4e      	ldr	r3, [pc, #312]	; (80017e0 <HAL_RCC_ClockConfig+0x1f0>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d109      	bne.n	80016c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e08e      	b.n	80017d4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016b6:	4b4a      	ldr	r3, [pc, #296]	; (80017e0 <HAL_RCC_ClockConfig+0x1f0>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d101      	bne.n	80016c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e086      	b.n	80017d4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80016c6:	4b46      	ldr	r3, [pc, #280]	; (80017e0 <HAL_RCC_ClockConfig+0x1f0>)
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	f023 0203 	bic.w	r2, r3, #3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	4943      	ldr	r1, [pc, #268]	; (80017e0 <HAL_RCC_ClockConfig+0x1f0>)
 80016d4:	4313      	orrs	r3, r2
 80016d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80016d8:	f7ff f81c 	bl	8000714 <HAL_GetTick>
 80016dc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016de:	e00a      	b.n	80016f6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016e0:	f7ff f818 	bl	8000714 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e06e      	b.n	80017d4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016f6:	4b3a      	ldr	r3, [pc, #232]	; (80017e0 <HAL_RCC_ClockConfig+0x1f0>)
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f003 020c 	and.w	r2, r3, #12
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	429a      	cmp	r2, r3
 8001706:	d1eb      	bne.n	80016e0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0302 	and.w	r3, r3, #2
 8001710:	2b00      	cmp	r3, #0
 8001712:	d010      	beq.n	8001736 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689a      	ldr	r2, [r3, #8]
 8001718:	4b31      	ldr	r3, [pc, #196]	; (80017e0 <HAL_RCC_ClockConfig+0x1f0>)
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001720:	429a      	cmp	r2, r3
 8001722:	d208      	bcs.n	8001736 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001724:	4b2e      	ldr	r3, [pc, #184]	; (80017e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	492b      	ldr	r1, [pc, #172]	; (80017e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001732:	4313      	orrs	r3, r2
 8001734:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001736:	4b29      	ldr	r3, [pc, #164]	; (80017dc <HAL_RCC_ClockConfig+0x1ec>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0307 	and.w	r3, r3, #7
 800173e:	683a      	ldr	r2, [r7, #0]
 8001740:	429a      	cmp	r2, r3
 8001742:	d210      	bcs.n	8001766 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001744:	4b25      	ldr	r3, [pc, #148]	; (80017dc <HAL_RCC_ClockConfig+0x1ec>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f023 0207 	bic.w	r2, r3, #7
 800174c:	4923      	ldr	r1, [pc, #140]	; (80017dc <HAL_RCC_ClockConfig+0x1ec>)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	4313      	orrs	r3, r2
 8001752:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001754:	4b21      	ldr	r3, [pc, #132]	; (80017dc <HAL_RCC_ClockConfig+0x1ec>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0307 	and.w	r3, r3, #7
 800175c:	683a      	ldr	r2, [r7, #0]
 800175e:	429a      	cmp	r2, r3
 8001760:	d001      	beq.n	8001766 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e036      	b.n	80017d4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0304 	and.w	r3, r3, #4
 800176e:	2b00      	cmp	r3, #0
 8001770:	d008      	beq.n	8001784 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001772:	4b1b      	ldr	r3, [pc, #108]	; (80017e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	4918      	ldr	r1, [pc, #96]	; (80017e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001780:	4313      	orrs	r3, r2
 8001782:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0308 	and.w	r3, r3, #8
 800178c:	2b00      	cmp	r3, #0
 800178e:	d009      	beq.n	80017a4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001790:	4b13      	ldr	r3, [pc, #76]	; (80017e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	691b      	ldr	r3, [r3, #16]
 800179c:	00db      	lsls	r3, r3, #3
 800179e:	4910      	ldr	r1, [pc, #64]	; (80017e0 <HAL_RCC_ClockConfig+0x1f0>)
 80017a0:	4313      	orrs	r3, r2
 80017a2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80017a4:	f000 f824 	bl	80017f0 <HAL_RCC_GetSysClockFreq>
 80017a8:	4602      	mov	r2, r0
 80017aa:	4b0d      	ldr	r3, [pc, #52]	; (80017e0 <HAL_RCC_ClockConfig+0x1f0>)
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	091b      	lsrs	r3, r3, #4
 80017b0:	f003 030f 	and.w	r3, r3, #15
 80017b4:	490b      	ldr	r1, [pc, #44]	; (80017e4 <HAL_RCC_ClockConfig+0x1f4>)
 80017b6:	5ccb      	ldrb	r3, [r1, r3]
 80017b8:	f003 031f 	and.w	r3, r3, #31
 80017bc:	fa22 f303 	lsr.w	r3, r2, r3
 80017c0:	4a09      	ldr	r2, [pc, #36]	; (80017e8 <HAL_RCC_ClockConfig+0x1f8>)
 80017c2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80017c4:	4b09      	ldr	r3, [pc, #36]	; (80017ec <HAL_RCC_ClockConfig+0x1fc>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7fe ff53 	bl	8000674 <HAL_InitTick>
 80017ce:	4603      	mov	r3, r0
 80017d0:	72fb      	strb	r3, [r7, #11]

  return status;
 80017d2:	7afb      	ldrb	r3, [r7, #11]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3710      	adds	r7, #16
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40022000 	.word	0x40022000
 80017e0:	40021000 	.word	0x40021000
 80017e4:	0800276c 	.word	0x0800276c
 80017e8:	20000000 	.word	0x20000000
 80017ec:	20000004 	.word	0x20000004

080017f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b089      	sub	sp, #36	; 0x24
 80017f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80017f6:	2300      	movs	r3, #0
 80017f8:	61fb      	str	r3, [r7, #28]
 80017fa:	2300      	movs	r3, #0
 80017fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017fe:	4b3e      	ldr	r3, [pc, #248]	; (80018f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f003 030c 	and.w	r3, r3, #12
 8001806:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001808:	4b3b      	ldr	r3, [pc, #236]	; (80018f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	f003 0303 	and.w	r3, r3, #3
 8001810:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d005      	beq.n	8001824 <HAL_RCC_GetSysClockFreq+0x34>
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	2b0c      	cmp	r3, #12
 800181c:	d121      	bne.n	8001862 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d11e      	bne.n	8001862 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001824:	4b34      	ldr	r3, [pc, #208]	; (80018f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0308 	and.w	r3, r3, #8
 800182c:	2b00      	cmp	r3, #0
 800182e:	d107      	bne.n	8001840 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001830:	4b31      	ldr	r3, [pc, #196]	; (80018f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001832:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001836:	0a1b      	lsrs	r3, r3, #8
 8001838:	f003 030f 	and.w	r3, r3, #15
 800183c:	61fb      	str	r3, [r7, #28]
 800183e:	e005      	b.n	800184c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001840:	4b2d      	ldr	r3, [pc, #180]	; (80018f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	091b      	lsrs	r3, r3, #4
 8001846:	f003 030f 	and.w	r3, r3, #15
 800184a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800184c:	4a2b      	ldr	r2, [pc, #172]	; (80018fc <HAL_RCC_GetSysClockFreq+0x10c>)
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001854:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d10d      	bne.n	8001878 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001860:	e00a      	b.n	8001878 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	2b04      	cmp	r3, #4
 8001866:	d102      	bne.n	800186e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001868:	4b25      	ldr	r3, [pc, #148]	; (8001900 <HAL_RCC_GetSysClockFreq+0x110>)
 800186a:	61bb      	str	r3, [r7, #24]
 800186c:	e004      	b.n	8001878 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	2b08      	cmp	r3, #8
 8001872:	d101      	bne.n	8001878 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001874:	4b23      	ldr	r3, [pc, #140]	; (8001904 <HAL_RCC_GetSysClockFreq+0x114>)
 8001876:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	2b0c      	cmp	r3, #12
 800187c:	d134      	bne.n	80018e8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800187e:	4b1e      	ldr	r3, [pc, #120]	; (80018f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	f003 0303 	and.w	r3, r3, #3
 8001886:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	2b02      	cmp	r3, #2
 800188c:	d003      	beq.n	8001896 <HAL_RCC_GetSysClockFreq+0xa6>
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	2b03      	cmp	r3, #3
 8001892:	d003      	beq.n	800189c <HAL_RCC_GetSysClockFreq+0xac>
 8001894:	e005      	b.n	80018a2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001896:	4b1a      	ldr	r3, [pc, #104]	; (8001900 <HAL_RCC_GetSysClockFreq+0x110>)
 8001898:	617b      	str	r3, [r7, #20]
      break;
 800189a:	e005      	b.n	80018a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800189c:	4b19      	ldr	r3, [pc, #100]	; (8001904 <HAL_RCC_GetSysClockFreq+0x114>)
 800189e:	617b      	str	r3, [r7, #20]
      break;
 80018a0:	e002      	b.n	80018a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	617b      	str	r3, [r7, #20]
      break;
 80018a6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80018a8:	4b13      	ldr	r3, [pc, #76]	; (80018f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	091b      	lsrs	r3, r3, #4
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	3301      	adds	r3, #1
 80018b4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80018b6:	4b10      	ldr	r3, [pc, #64]	; (80018f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	0a1b      	lsrs	r3, r3, #8
 80018bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018c0:	697a      	ldr	r2, [r7, #20]
 80018c2:	fb03 f202 	mul.w	r2, r3, r2
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018cc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80018ce:	4b0a      	ldr	r3, [pc, #40]	; (80018f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	0e5b      	lsrs	r3, r3, #25
 80018d4:	f003 0303 	and.w	r3, r3, #3
 80018d8:	3301      	adds	r3, #1
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80018de:	697a      	ldr	r2, [r7, #20]
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80018e8:	69bb      	ldr	r3, [r7, #24]
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3724      	adds	r7, #36	; 0x24
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	40021000 	.word	0x40021000
 80018fc:	0800277c 	.word	0x0800277c
 8001900:	00f42400 	.word	0x00f42400
 8001904:	007a1200 	.word	0x007a1200

08001908 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001910:	2300      	movs	r3, #0
 8001912:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001914:	4b2a      	ldr	r3, [pc, #168]	; (80019c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001918:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d003      	beq.n	8001928 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001920:	f7ff f9a0 	bl	8000c64 <HAL_PWREx_GetVoltageRange>
 8001924:	6178      	str	r0, [r7, #20]
 8001926:	e014      	b.n	8001952 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001928:	4b25      	ldr	r3, [pc, #148]	; (80019c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800192a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800192c:	4a24      	ldr	r2, [pc, #144]	; (80019c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800192e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001932:	6593      	str	r3, [r2, #88]	; 0x58
 8001934:	4b22      	ldr	r3, [pc, #136]	; (80019c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193c:	60fb      	str	r3, [r7, #12]
 800193e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001940:	f7ff f990 	bl	8000c64 <HAL_PWREx_GetVoltageRange>
 8001944:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001946:	4b1e      	ldr	r3, [pc, #120]	; (80019c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800194a:	4a1d      	ldr	r2, [pc, #116]	; (80019c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800194c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001950:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001958:	d10b      	bne.n	8001972 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2b80      	cmp	r3, #128	; 0x80
 800195e:	d919      	bls.n	8001994 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2ba0      	cmp	r3, #160	; 0xa0
 8001964:	d902      	bls.n	800196c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001966:	2302      	movs	r3, #2
 8001968:	613b      	str	r3, [r7, #16]
 800196a:	e013      	b.n	8001994 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800196c:	2301      	movs	r3, #1
 800196e:	613b      	str	r3, [r7, #16]
 8001970:	e010      	b.n	8001994 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2b80      	cmp	r3, #128	; 0x80
 8001976:	d902      	bls.n	800197e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001978:	2303      	movs	r3, #3
 800197a:	613b      	str	r3, [r7, #16]
 800197c:	e00a      	b.n	8001994 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2b80      	cmp	r3, #128	; 0x80
 8001982:	d102      	bne.n	800198a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001984:	2302      	movs	r3, #2
 8001986:	613b      	str	r3, [r7, #16]
 8001988:	e004      	b.n	8001994 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2b70      	cmp	r3, #112	; 0x70
 800198e:	d101      	bne.n	8001994 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001990:	2301      	movs	r3, #1
 8001992:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001994:	4b0b      	ldr	r3, [pc, #44]	; (80019c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f023 0207 	bic.w	r2, r3, #7
 800199c:	4909      	ldr	r1, [pc, #36]	; (80019c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80019a4:	4b07      	ldr	r3, [pc, #28]	; (80019c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0307 	and.w	r3, r3, #7
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d001      	beq.n	80019b6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e000      	b.n	80019b8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80019b6:	2300      	movs	r3, #0
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3718      	adds	r7, #24
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40021000 	.word	0x40021000
 80019c4:	40022000 	.word	0x40022000

080019c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d101      	bne.n	80019da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e049      	b.n	8001a6e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d106      	bne.n	80019f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f7fe fd36 	bl	8000460 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2202      	movs	r2, #2
 80019f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	3304      	adds	r3, #4
 8001a04:	4619      	mov	r1, r3
 8001a06:	4610      	mov	r0, r2
 8001a08:	f000 fa9a 	bl	8001f40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2201      	movs	r2, #1
 8001a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2201      	movs	r2, #1
 8001a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2201      	movs	r2, #1
 8001a38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2201      	movs	r2, #1
 8001a48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b082      	sub	sp, #8
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	691b      	ldr	r3, [r3, #16]
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d122      	bne.n	8001ad2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d11b      	bne.n	8001ad2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f06f 0202 	mvn.w	r2, #2
 8001aa2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	f003 0303 	and.w	r3, r3, #3
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d003      	beq.n	8001ac0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f000 fa23 	bl	8001f04 <HAL_TIM_IC_CaptureCallback>
 8001abe:	e005      	b.n	8001acc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f000 fa15 	bl	8001ef0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f000 fa26 	bl	8001f18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	691b      	ldr	r3, [r3, #16]
 8001ad8:	f003 0304 	and.w	r3, r3, #4
 8001adc:	2b04      	cmp	r3, #4
 8001ade:	d122      	bne.n	8001b26 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	f003 0304 	and.w	r3, r3, #4
 8001aea:	2b04      	cmp	r3, #4
 8001aec:	d11b      	bne.n	8001b26 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f06f 0204 	mvn.w	r2, #4
 8001af6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2202      	movs	r2, #2
 8001afc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d003      	beq.n	8001b14 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f000 f9f9 	bl	8001f04 <HAL_TIM_IC_CaptureCallback>
 8001b12:	e005      	b.n	8001b20 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f000 f9eb 	bl	8001ef0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f000 f9fc 	bl	8001f18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	691b      	ldr	r3, [r3, #16]
 8001b2c:	f003 0308 	and.w	r3, r3, #8
 8001b30:	2b08      	cmp	r3, #8
 8001b32:	d122      	bne.n	8001b7a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	f003 0308 	and.w	r3, r3, #8
 8001b3e:	2b08      	cmp	r3, #8
 8001b40:	d11b      	bne.n	8001b7a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f06f 0208 	mvn.w	r2, #8
 8001b4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2204      	movs	r2, #4
 8001b50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	69db      	ldr	r3, [r3, #28]
 8001b58:	f003 0303 	and.w	r3, r3, #3
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d003      	beq.n	8001b68 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f000 f9cf 	bl	8001f04 <HAL_TIM_IC_CaptureCallback>
 8001b66:	e005      	b.n	8001b74 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f000 f9c1 	bl	8001ef0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f000 f9d2 	bl	8001f18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	691b      	ldr	r3, [r3, #16]
 8001b80:	f003 0310 	and.w	r3, r3, #16
 8001b84:	2b10      	cmp	r3, #16
 8001b86:	d122      	bne.n	8001bce <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	f003 0310 	and.w	r3, r3, #16
 8001b92:	2b10      	cmp	r3, #16
 8001b94:	d11b      	bne.n	8001bce <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f06f 0210 	mvn.w	r2, #16
 8001b9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2208      	movs	r2, #8
 8001ba4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	69db      	ldr	r3, [r3, #28]
 8001bac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d003      	beq.n	8001bbc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f000 f9a5 	bl	8001f04 <HAL_TIM_IC_CaptureCallback>
 8001bba:	e005      	b.n	8001bc8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f000 f997 	bl	8001ef0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f000 f9a8 	bl	8001f18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	691b      	ldr	r3, [r3, #16]
 8001bd4:	f003 0301 	and.w	r3, r3, #1
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d10e      	bne.n	8001bfa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d107      	bne.n	8001bfa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f06f 0201 	mvn.w	r2, #1
 8001bf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f000 f971 	bl	8001edc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	691b      	ldr	r3, [r3, #16]
 8001c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c04:	2b80      	cmp	r3, #128	; 0x80
 8001c06:	d10e      	bne.n	8001c26 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c12:	2b80      	cmp	r3, #128	; 0x80
 8001c14:	d107      	bne.n	8001c26 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001c1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f000 fd57 	bl	80026d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	691b      	ldr	r3, [r3, #16]
 8001c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c34:	d10e      	bne.n	8001c54 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c40:	2b80      	cmp	r3, #128	; 0x80
 8001c42:	d107      	bne.n	8001c54 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001c4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f000 fd4a 	bl	80026e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	691b      	ldr	r3, [r3, #16]
 8001c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c5e:	2b40      	cmp	r3, #64	; 0x40
 8001c60:	d10e      	bne.n	8001c80 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c6c:	2b40      	cmp	r3, #64	; 0x40
 8001c6e:	d107      	bne.n	8001c80 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001c78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 f956 	bl	8001f2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	691b      	ldr	r3, [r3, #16]
 8001c86:	f003 0320 	and.w	r3, r3, #32
 8001c8a:	2b20      	cmp	r3, #32
 8001c8c:	d10e      	bne.n	8001cac <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	f003 0320 	and.w	r3, r3, #32
 8001c98:	2b20      	cmp	r3, #32
 8001c9a:	d107      	bne.n	8001cac <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f06f 0220 	mvn.w	r2, #32
 8001ca4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 fd0a 	bl	80026c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001cac:	bf00      	nop
 8001cae:	3708      	adds	r7, #8
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b086      	sub	sp, #24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	60b9      	str	r1, [r7, #8]
 8001cbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d101      	bne.n	8001cd2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001cce:	2302      	movs	r3, #2
 8001cd0:	e0ff      	b.n	8001ed2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2b14      	cmp	r3, #20
 8001cde:	f200 80f0 	bhi.w	8001ec2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8001ce2:	a201      	add	r2, pc, #4	; (adr r2, 8001ce8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ce8:	08001d3d 	.word	0x08001d3d
 8001cec:	08001ec3 	.word	0x08001ec3
 8001cf0:	08001ec3 	.word	0x08001ec3
 8001cf4:	08001ec3 	.word	0x08001ec3
 8001cf8:	08001d7d 	.word	0x08001d7d
 8001cfc:	08001ec3 	.word	0x08001ec3
 8001d00:	08001ec3 	.word	0x08001ec3
 8001d04:	08001ec3 	.word	0x08001ec3
 8001d08:	08001dbf 	.word	0x08001dbf
 8001d0c:	08001ec3 	.word	0x08001ec3
 8001d10:	08001ec3 	.word	0x08001ec3
 8001d14:	08001ec3 	.word	0x08001ec3
 8001d18:	08001dff 	.word	0x08001dff
 8001d1c:	08001ec3 	.word	0x08001ec3
 8001d20:	08001ec3 	.word	0x08001ec3
 8001d24:	08001ec3 	.word	0x08001ec3
 8001d28:	08001e41 	.word	0x08001e41
 8001d2c:	08001ec3 	.word	0x08001ec3
 8001d30:	08001ec3 	.word	0x08001ec3
 8001d34:	08001ec3 	.word	0x08001ec3
 8001d38:	08001e81 	.word	0x08001e81
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	68b9      	ldr	r1, [r7, #8]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f000 f960 	bl	8002008 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	699a      	ldr	r2, [r3, #24]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f042 0208 	orr.w	r2, r2, #8
 8001d56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	699a      	ldr	r2, [r3, #24]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f022 0204 	bic.w	r2, r2, #4
 8001d66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	6999      	ldr	r1, [r3, #24]
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	691a      	ldr	r2, [r3, #16]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	430a      	orrs	r2, r1
 8001d78:	619a      	str	r2, [r3, #24]
      break;
 8001d7a:	e0a5      	b.n	8001ec8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	68b9      	ldr	r1, [r7, #8]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f000 f9bc 	bl	8002100 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	699a      	ldr	r2, [r3, #24]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	699a      	ldr	r2, [r3, #24]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001da6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6999      	ldr	r1, [r3, #24]
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	021a      	lsls	r2, r3, #8
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	430a      	orrs	r2, r1
 8001dba:	619a      	str	r2, [r3, #24]
      break;
 8001dbc:	e084      	b.n	8001ec8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	68b9      	ldr	r1, [r7, #8]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f000 fa15 	bl	80021f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	69da      	ldr	r2, [r3, #28]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f042 0208 	orr.w	r2, r2, #8
 8001dd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	69da      	ldr	r2, [r3, #28]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f022 0204 	bic.w	r2, r2, #4
 8001de8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	69d9      	ldr	r1, [r3, #28]
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	691a      	ldr	r2, [r3, #16]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	61da      	str	r2, [r3, #28]
      break;
 8001dfc:	e064      	b.n	8001ec8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	68b9      	ldr	r1, [r7, #8]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f000 fa6d 	bl	80022e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	69da      	ldr	r2, [r3, #28]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	69da      	ldr	r2, [r3, #28]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	69d9      	ldr	r1, [r3, #28]
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	691b      	ldr	r3, [r3, #16]
 8001e34:	021a      	lsls	r2, r3, #8
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	61da      	str	r2, [r3, #28]
      break;
 8001e3e:	e043      	b.n	8001ec8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	68b9      	ldr	r1, [r7, #8]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f000 faaa 	bl	80023a0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f042 0208 	orr.w	r2, r2, #8
 8001e5a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f022 0204 	bic.w	r2, r2, #4
 8001e6a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	691a      	ldr	r2, [r3, #16]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001e7e:	e023      	b.n	8001ec8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	68b9      	ldr	r1, [r7, #8]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f000 fae2 	bl	8002450 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e9a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001eaa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	691b      	ldr	r3, [r3, #16]
 8001eb6:	021a      	lsls	r2, r3, #8
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001ec0:	e002      	b.n	8001ec8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	75fb      	strb	r3, [r7, #23]
      break;
 8001ec6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001ed0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3718      	adds	r7, #24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop

08001edc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b085      	sub	sp, #20
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4a2a      	ldr	r2, [pc, #168]	; (8001ffc <TIM_Base_SetConfig+0xbc>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d003      	beq.n	8001f60 <TIM_Base_SetConfig+0x20>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f5e:	d108      	bne.n	8001f72 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	68fa      	ldr	r2, [r7, #12]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a21      	ldr	r2, [pc, #132]	; (8001ffc <TIM_Base_SetConfig+0xbc>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d00b      	beq.n	8001f92 <TIM_Base_SetConfig+0x52>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f80:	d007      	beq.n	8001f92 <TIM_Base_SetConfig+0x52>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a1e      	ldr	r2, [pc, #120]	; (8002000 <TIM_Base_SetConfig+0xc0>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d003      	beq.n	8001f92 <TIM_Base_SetConfig+0x52>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a1d      	ldr	r2, [pc, #116]	; (8002004 <TIM_Base_SetConfig+0xc4>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d108      	bne.n	8001fa4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	689a      	ldr	r2, [r3, #8]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a0c      	ldr	r2, [pc, #48]	; (8001ffc <TIM_Base_SetConfig+0xbc>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d007      	beq.n	8001fe0 <TIM_Base_SetConfig+0xa0>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a0b      	ldr	r2, [pc, #44]	; (8002000 <TIM_Base_SetConfig+0xc0>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d003      	beq.n	8001fe0 <TIM_Base_SetConfig+0xa0>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a0a      	ldr	r2, [pc, #40]	; (8002004 <TIM_Base_SetConfig+0xc4>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d103      	bne.n	8001fe8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	691a      	ldr	r2, [r3, #16]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	615a      	str	r2, [r3, #20]
}
 8001fee:	bf00      	nop
 8001ff0:	3714      	adds	r7, #20
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	40012c00 	.word	0x40012c00
 8002000:	40014000 	.word	0x40014000
 8002004:	40014400 	.word	0x40014400

08002008 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002008:	b480      	push	{r7}
 800200a:	b087      	sub	sp, #28
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a1b      	ldr	r3, [r3, #32]
 8002016:	f023 0201 	bic.w	r2, r3, #1
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a1b      	ldr	r3, [r3, #32]
 8002022:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800203a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f023 0303 	bic.w	r3, r3, #3
 8002042:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	68fa      	ldr	r2, [r7, #12]
 800204a:	4313      	orrs	r3, r2
 800204c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	f023 0302 	bic.w	r3, r3, #2
 8002054:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	697a      	ldr	r2, [r7, #20]
 800205c:	4313      	orrs	r3, r2
 800205e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a24      	ldr	r2, [pc, #144]	; (80020f4 <TIM_OC1_SetConfig+0xec>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d007      	beq.n	8002078 <TIM_OC1_SetConfig+0x70>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4a23      	ldr	r2, [pc, #140]	; (80020f8 <TIM_OC1_SetConfig+0xf0>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d003      	beq.n	8002078 <TIM_OC1_SetConfig+0x70>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a22      	ldr	r2, [pc, #136]	; (80020fc <TIM_OC1_SetConfig+0xf4>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d10c      	bne.n	8002092 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	f023 0308 	bic.w	r3, r3, #8
 800207e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	697a      	ldr	r2, [r7, #20]
 8002086:	4313      	orrs	r3, r2
 8002088:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	f023 0304 	bic.w	r3, r3, #4
 8002090:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a17      	ldr	r2, [pc, #92]	; (80020f4 <TIM_OC1_SetConfig+0xec>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d007      	beq.n	80020aa <TIM_OC1_SetConfig+0xa2>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a16      	ldr	r2, [pc, #88]	; (80020f8 <TIM_OC1_SetConfig+0xf0>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d003      	beq.n	80020aa <TIM_OC1_SetConfig+0xa2>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a15      	ldr	r2, [pc, #84]	; (80020fc <TIM_OC1_SetConfig+0xf4>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d111      	bne.n	80020ce <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80020b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	695b      	ldr	r3, [r3, #20]
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	693a      	ldr	r2, [r7, #16]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685a      	ldr	r2, [r3, #4]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	697a      	ldr	r2, [r7, #20]
 80020e6:	621a      	str	r2, [r3, #32]
}
 80020e8:	bf00      	nop
 80020ea:	371c      	adds	r7, #28
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr
 80020f4:	40012c00 	.word	0x40012c00
 80020f8:	40014000 	.word	0x40014000
 80020fc:	40014400 	.word	0x40014400

08002100 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002100:	b480      	push	{r7}
 8002102:	b087      	sub	sp, #28
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a1b      	ldr	r3, [r3, #32]
 800210e:	f023 0210 	bic.w	r2, r3, #16
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a1b      	ldr	r3, [r3, #32]
 800211a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800212e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002132:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800213a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	021b      	lsls	r3, r3, #8
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	4313      	orrs	r3, r2
 8002146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	f023 0320 	bic.w	r3, r3, #32
 800214e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	011b      	lsls	r3, r3, #4
 8002156:	697a      	ldr	r2, [r7, #20]
 8002158:	4313      	orrs	r3, r2
 800215a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4a22      	ldr	r2, [pc, #136]	; (80021e8 <TIM_OC2_SetConfig+0xe8>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d10d      	bne.n	8002180 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800216a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	011b      	lsls	r3, r3, #4
 8002172:	697a      	ldr	r2, [r7, #20]
 8002174:	4313      	orrs	r3, r2
 8002176:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800217e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a19      	ldr	r2, [pc, #100]	; (80021e8 <TIM_OC2_SetConfig+0xe8>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d007      	beq.n	8002198 <TIM_OC2_SetConfig+0x98>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a18      	ldr	r2, [pc, #96]	; (80021ec <TIM_OC2_SetConfig+0xec>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d003      	beq.n	8002198 <TIM_OC2_SetConfig+0x98>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a17      	ldr	r2, [pc, #92]	; (80021f0 <TIM_OC2_SetConfig+0xf0>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d113      	bne.n	80021c0 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800219e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80021a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	695b      	ldr	r3, [r3, #20]
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	693a      	ldr	r2, [r7, #16]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	693a      	ldr	r2, [r7, #16]
 80021bc:	4313      	orrs	r3, r2
 80021be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	68fa      	ldr	r2, [r7, #12]
 80021ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685a      	ldr	r2, [r3, #4]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	697a      	ldr	r2, [r7, #20]
 80021d8:	621a      	str	r2, [r3, #32]
}
 80021da:	bf00      	nop
 80021dc:	371c      	adds	r7, #28
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	40012c00 	.word	0x40012c00
 80021ec:	40014000 	.word	0x40014000
 80021f0:	40014400 	.word	0x40014400

080021f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b087      	sub	sp, #28
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a1b      	ldr	r3, [r3, #32]
 8002202:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a1b      	ldr	r3, [r3, #32]
 800220e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	69db      	ldr	r3, [r3, #28]
 800221a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002226:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f023 0303 	bic.w	r3, r3, #3
 800222e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68fa      	ldr	r2, [r7, #12]
 8002236:	4313      	orrs	r3, r2
 8002238:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002240:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	021b      	lsls	r3, r3, #8
 8002248:	697a      	ldr	r2, [r7, #20]
 800224a:	4313      	orrs	r3, r2
 800224c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a21      	ldr	r2, [pc, #132]	; (80022d8 <TIM_OC3_SetConfig+0xe4>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d10d      	bne.n	8002272 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800225c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	021b      	lsls	r3, r3, #8
 8002264:	697a      	ldr	r2, [r7, #20]
 8002266:	4313      	orrs	r3, r2
 8002268:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002270:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a18      	ldr	r2, [pc, #96]	; (80022d8 <TIM_OC3_SetConfig+0xe4>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d007      	beq.n	800228a <TIM_OC3_SetConfig+0x96>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a17      	ldr	r2, [pc, #92]	; (80022dc <TIM_OC3_SetConfig+0xe8>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d003      	beq.n	800228a <TIM_OC3_SetConfig+0x96>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a16      	ldr	r2, [pc, #88]	; (80022e0 <TIM_OC3_SetConfig+0xec>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d113      	bne.n	80022b2 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002290:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002298:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	695b      	ldr	r3, [r3, #20]
 800229e:	011b      	lsls	r3, r3, #4
 80022a0:	693a      	ldr	r2, [r7, #16]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	011b      	lsls	r3, r3, #4
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	693a      	ldr	r2, [r7, #16]
 80022b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	68fa      	ldr	r2, [r7, #12]
 80022bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685a      	ldr	r2, [r3, #4]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	697a      	ldr	r2, [r7, #20]
 80022ca:	621a      	str	r2, [r3, #32]
}
 80022cc:	bf00      	nop
 80022ce:	371c      	adds	r7, #28
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	40012c00 	.word	0x40012c00
 80022dc:	40014000 	.word	0x40014000
 80022e0:	40014400 	.word	0x40014400

080022e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b087      	sub	sp, #28
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a1b      	ldr	r3, [r3, #32]
 80022f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a1b      	ldr	r3, [r3, #32]
 80022fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002312:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002316:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800231e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	021b      	lsls	r3, r3, #8
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	4313      	orrs	r3, r2
 800232a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002332:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	031b      	lsls	r3, r3, #12
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	4313      	orrs	r3, r2
 800233e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a14      	ldr	r2, [pc, #80]	; (8002394 <TIM_OC4_SetConfig+0xb0>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d007      	beq.n	8002358 <TIM_OC4_SetConfig+0x74>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a13      	ldr	r2, [pc, #76]	; (8002398 <TIM_OC4_SetConfig+0xb4>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d003      	beq.n	8002358 <TIM_OC4_SetConfig+0x74>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a12      	ldr	r2, [pc, #72]	; (800239c <TIM_OC4_SetConfig+0xb8>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d109      	bne.n	800236c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800235e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	695b      	ldr	r3, [r3, #20]
 8002364:	019b      	lsls	r3, r3, #6
 8002366:	697a      	ldr	r2, [r7, #20]
 8002368:	4313      	orrs	r3, r2
 800236a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	697a      	ldr	r2, [r7, #20]
 8002370:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	68fa      	ldr	r2, [r7, #12]
 8002376:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685a      	ldr	r2, [r3, #4]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	621a      	str	r2, [r3, #32]
}
 8002386:	bf00      	nop
 8002388:	371c      	adds	r7, #28
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	40012c00 	.word	0x40012c00
 8002398:	40014000 	.word	0x40014000
 800239c:	40014400 	.word	0x40014400

080023a0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b087      	sub	sp, #28
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a1b      	ldr	r3, [r3, #32]
 80023ae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a1b      	ldr	r3, [r3, #32]
 80023ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68fa      	ldr	r2, [r7, #12]
 80023da:	4313      	orrs	r3, r2
 80023dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80023e4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	041b      	lsls	r3, r3, #16
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a13      	ldr	r2, [pc, #76]	; (8002444 <TIM_OC5_SetConfig+0xa4>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d007      	beq.n	800240a <TIM_OC5_SetConfig+0x6a>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a12      	ldr	r2, [pc, #72]	; (8002448 <TIM_OC5_SetConfig+0xa8>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d003      	beq.n	800240a <TIM_OC5_SetConfig+0x6a>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a11      	ldr	r2, [pc, #68]	; (800244c <TIM_OC5_SetConfig+0xac>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d109      	bne.n	800241e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002410:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	695b      	ldr	r3, [r3, #20]
 8002416:	021b      	lsls	r3, r3, #8
 8002418:	697a      	ldr	r2, [r7, #20]
 800241a:	4313      	orrs	r3, r2
 800241c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	697a      	ldr	r2, [r7, #20]
 8002422:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	68fa      	ldr	r2, [r7, #12]
 8002428:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685a      	ldr	r2, [r3, #4]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	693a      	ldr	r2, [r7, #16]
 8002436:	621a      	str	r2, [r3, #32]
}
 8002438:	bf00      	nop
 800243a:	371c      	adds	r7, #28
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr
 8002444:	40012c00 	.word	0x40012c00
 8002448:	40014000 	.word	0x40014000
 800244c:	40014400 	.word	0x40014400

08002450 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002450:	b480      	push	{r7}
 8002452:	b087      	sub	sp, #28
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a1b      	ldr	r3, [r3, #32]
 800245e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a1b      	ldr	r3, [r3, #32]
 800246a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800247e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002482:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	021b      	lsls	r3, r3, #8
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	4313      	orrs	r3, r2
 800248e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002496:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	051b      	lsls	r3, r3, #20
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4a14      	ldr	r2, [pc, #80]	; (80024f8 <TIM_OC6_SetConfig+0xa8>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d007      	beq.n	80024bc <TIM_OC6_SetConfig+0x6c>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4a13      	ldr	r2, [pc, #76]	; (80024fc <TIM_OC6_SetConfig+0xac>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d003      	beq.n	80024bc <TIM_OC6_SetConfig+0x6c>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4a12      	ldr	r2, [pc, #72]	; (8002500 <TIM_OC6_SetConfig+0xb0>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d109      	bne.n	80024d0 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024c2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	695b      	ldr	r3, [r3, #20]
 80024c8:	029b      	lsls	r3, r3, #10
 80024ca:	697a      	ldr	r2, [r7, #20]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	697a      	ldr	r2, [r7, #20]
 80024d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	68fa      	ldr	r2, [r7, #12]
 80024da:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685a      	ldr	r2, [r3, #4]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	621a      	str	r2, [r3, #32]
}
 80024ea:	bf00      	nop
 80024ec:	371c      	adds	r7, #28
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	40012c00 	.word	0x40012c00
 80024fc:	40014000 	.word	0x40014000
 8002500:	40014400 	.word	0x40014400

08002504 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002514:	2b01      	cmp	r3, #1
 8002516:	d101      	bne.n	800251c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002518:	2302      	movs	r3, #2
 800251a:	e04f      	b.n	80025bc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2202      	movs	r2, #2
 8002528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a21      	ldr	r2, [pc, #132]	; (80025c8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d108      	bne.n	8002558 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800254c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	4313      	orrs	r3, r2
 8002556:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800255e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	68fa      	ldr	r2, [r7, #12]
 8002566:	4313      	orrs	r3, r2
 8002568:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68fa      	ldr	r2, [r7, #12]
 8002570:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a14      	ldr	r2, [pc, #80]	; (80025c8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d009      	beq.n	8002590 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002584:	d004      	beq.n	8002590 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a10      	ldr	r2, [pc, #64]	; (80025cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d10c      	bne.n	80025aa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002596:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	68ba      	ldr	r2, [r7, #8]
 800259e:	4313      	orrs	r3, r2
 80025a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	68ba      	ldr	r2, [r7, #8]
 80025a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2201      	movs	r2, #1
 80025ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025ba:	2300      	movs	r3, #0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3714      	adds	r7, #20
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	40012c00 	.word	0x40012c00
 80025cc:	40014000 	.word	0x40014000

080025d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80025da:	2300      	movs	r3, #0
 80025dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d101      	bne.n	80025ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80025e8:	2302      	movs	r3, #2
 80025ea:	e060      	b.n	80026ae <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	4313      	orrs	r3, r2
 8002600:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	4313      	orrs	r3, r2
 800260e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	4313      	orrs	r3, r2
 800261c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4313      	orrs	r3, r2
 800262a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	4313      	orrs	r3, r2
 8002638:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	695b      	ldr	r3, [r3, #20]
 8002644:	4313      	orrs	r3, r2
 8002646:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002652:	4313      	orrs	r3, r2
 8002654:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	041b      	lsls	r3, r3, #16
 8002662:	4313      	orrs	r3, r2
 8002664:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a14      	ldr	r2, [pc, #80]	; (80026bc <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d115      	bne.n	800269c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267a:	051b      	lsls	r3, r3, #20
 800267c:	4313      	orrs	r3, r2
 800267e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	69db      	ldr	r3, [r3, #28]
 800268a:	4313      	orrs	r3, r2
 800268c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	6a1b      	ldr	r3, [r3, #32]
 8002698:	4313      	orrs	r3, r2
 800269a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68fa      	ldr	r2, [r7, #12]
 80026a2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3714      	adds	r7, #20
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	40012c00 	.word	0x40012c00

080026c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80026c8:	bf00      	nop
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <__libc_init_array>:
 80026fc:	b570      	push	{r4, r5, r6, lr}
 80026fe:	4d0d      	ldr	r5, [pc, #52]	; (8002734 <__libc_init_array+0x38>)
 8002700:	4c0d      	ldr	r4, [pc, #52]	; (8002738 <__libc_init_array+0x3c>)
 8002702:	1b64      	subs	r4, r4, r5
 8002704:	10a4      	asrs	r4, r4, #2
 8002706:	2600      	movs	r6, #0
 8002708:	42a6      	cmp	r6, r4
 800270a:	d109      	bne.n	8002720 <__libc_init_array+0x24>
 800270c:	4d0b      	ldr	r5, [pc, #44]	; (800273c <__libc_init_array+0x40>)
 800270e:	4c0c      	ldr	r4, [pc, #48]	; (8002740 <__libc_init_array+0x44>)
 8002710:	f000 f820 	bl	8002754 <_init>
 8002714:	1b64      	subs	r4, r4, r5
 8002716:	10a4      	asrs	r4, r4, #2
 8002718:	2600      	movs	r6, #0
 800271a:	42a6      	cmp	r6, r4
 800271c:	d105      	bne.n	800272a <__libc_init_array+0x2e>
 800271e:	bd70      	pop	{r4, r5, r6, pc}
 8002720:	f855 3b04 	ldr.w	r3, [r5], #4
 8002724:	4798      	blx	r3
 8002726:	3601      	adds	r6, #1
 8002728:	e7ee      	b.n	8002708 <__libc_init_array+0xc>
 800272a:	f855 3b04 	ldr.w	r3, [r5], #4
 800272e:	4798      	blx	r3
 8002730:	3601      	adds	r6, #1
 8002732:	e7f2      	b.n	800271a <__libc_init_array+0x1e>
 8002734:	080027ac 	.word	0x080027ac
 8002738:	080027ac 	.word	0x080027ac
 800273c:	080027ac 	.word	0x080027ac
 8002740:	080027b0 	.word	0x080027b0

08002744 <memset>:
 8002744:	4402      	add	r2, r0
 8002746:	4603      	mov	r3, r0
 8002748:	4293      	cmp	r3, r2
 800274a:	d100      	bne.n	800274e <memset+0xa>
 800274c:	4770      	bx	lr
 800274e:	f803 1b01 	strb.w	r1, [r3], #1
 8002752:	e7f9      	b.n	8002748 <memset+0x4>

08002754 <_init>:
 8002754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002756:	bf00      	nop
 8002758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800275a:	bc08      	pop	{r3}
 800275c:	469e      	mov	lr, r3
 800275e:	4770      	bx	lr

08002760 <_fini>:
 8002760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002762:	bf00      	nop
 8002764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002766:	bc08      	pop	{r3}
 8002768:	469e      	mov	lr, r3
 800276a:	4770      	bx	lr
